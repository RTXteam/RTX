// WARNING:
// This file was auto-generated by /mnt/data/orangeboard/devLM/RTX/code/UI/interactive/./dsl2json.py on: 2025-03-04 23:54:33
//
var araxi_commands = {
  "add_qedge()": {
    "parameters": {
      "key": {
        "is_required": false,
        "examples": [
          "e00",
          "e01"
        ],
        "default": "",
        "type": "string",
        "description": "Any string that is unique among all QEdge key fields, with recommended format e00, e01, e02, etc.\n                        If no value is provided, autoincrementing values beginning for e00 are used."
      },
      "subject": {
        "is_required": true,
        "examples": [
          "n00",
          "n01"
        ],
        "type": "string",
        "description": "key of the source QNode already present in the QueryGraph (e.g. n00, n01)"
      },
      "object": {
        "is_required": true,
        "examples": [
          "n01",
          "n02"
        ],
        "type": "string",
        "description": "key of the target QNode already present in the QueryGraph (e.g. n01, n02)"
      },
      "predicates": {
        "is_required": false,
        "examples": [
          [
            "biolink:physically_interacts_with"
          ],
          [
            "biolink:participates_in"
          ]
        ],
        "type": "ARAXedge",
        "description": "A list (n >= 1) of valid BioLink relationship predicates (e.g. [physically_interacts_with], [participates_in])"
      },
      "option_group_id": {
        "is_required": false,
        "examples": [
          "1",
          "a",
          "b2",
          "option"
        ],
        "type": "string",
        "description": "A group identifier indicating a group of nodes and edges should either all be included or all excluded. An optional match for all elements in this group. If not included Node will be treated as required."
      },
      "exclude": {
        "is_required": false,
        "enum": [
          "true",
          "false"
        ],
        "examples": [
          "true",
          "false"
        ],
        "type": "boolean",
        "description": "If set to true, results with this node will be excluded. If set to false or not included nodes will be treated as part of a normal query."
      }
    },
    "description": "The `add_qedge` command adds an additional QEdge to the QueryGraph in the Message object. Currently\n                subject and object QNodes must already be present in the QueryGraph. The specified type is not currently checked that it is a\n                valid Translator/BioLink relationship type, but it should be."
  },
  "add_qnode()": {
    "parameters": {
      "key": {
        "is_required": false,
        "examples": [
          "n00",
          "n01"
        ],
        "default": "",
        "type": "string",
        "description": "Any string that is unique among all QNode key fields, with recommended format n00, n01, n02, etc.\n                        If no value is provided, autoincrementing values beginning for n00 are used."
      },
      "ids": {
        "is_required": false,
        "examples": [
          "DOID:9281",
          "[UniProtKB:P12345,UniProtKB:Q54321]"
        ],
        "type": "string",
        "description": "A list (n >= 1) of compact URI (CURIE) (e.g. [DOID:9281] or [UniProtKB:P12345,UniProtKB:Q54321])"
      },
      "name": {
        "is_required": false,
        "examples": [
          "hypertension",
          "insulin"
        ],
        "type": "string",
        "description": "Any name of a bioentity that will be resolved into a CURIE if possible or result in an error if not (e.g. hypertension, insulin)"
      },
      "categories": {
        "is_required": false,
        "examples": [
          "protein",
          "chemical_substance",
          "disease"
        ],
        "type": "ARAXnode",
        "description": "A list (n >= 1) of valid BioLink bioentity categories (e.g. biolink:Protein, biolink:ChemicalEntity, biolink:Disease)"
      },
      "is_set": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "examples": [
          "true",
          "false"
        ],
        "type": "boolean",
        "description": "If set to true, this QNode represents a set of nodes that are all in common between the two other linked QNodes (assumed to be false if not specified or value is not recognized as true/t case insensitive)"
      },
      "option_group_id": {
        "is_required": false,
        "examples": [
          "1",
          "a",
          "b2",
          "option"
        ],
        "type": "string",
        "description": "A group identifier indicating a group of nodes and edges should either all be included or all excluded. An optional match for all elements in this group. If not included Node will be treated as required."
      }
    },
    "description": "The `add_qnode` method adds an additional QNode to the QueryGraph in the Message object."
  },
  "create_envelope()": {
    "parameters": {},
    "description": "The `create_envelope` command creates a basic empty Response object with basic boilerplate metadata\n                such as resource_id, schema_version, etc. filled in. This DSL command takes no arguments. This command is not explicitly\n                necessary, as it is called implicitly when needed. e.g. If a DSL program begins with add_qnode(), the\n                create_envelope() will be executed automatically if there is not yet a ARAXResponse. If there is already ARAXResponse in memory,\n                then this command will destroy the previous one (in memory) and begin a new envelope."
  },
  "expand()": {
    "parameters": {
      "kp": {
        "is_required": false,
        "examples": [
          "infores:rtx-kg2, infores:spoke, [infores:rtx-kg2, infores:molepro]"
        ],
        "type": "string",
        "default": null,
        "description": "The KP(s) to ask for answers to the given query. KPs must be referred to by their 'infores' curies. Either a single infores curie or list of infores curies is valid."
      },
      "edge_key": {
        "is_required": false,
        "examples": [
          "e00",
          "[e00, e01]"
        ],
        "type": "string",
        "description": "A query graph edge ID or list of such IDs to expand (default is to expand entire query graph)."
      },
      "node_key": {
        "is_required": false,
        "examples": [
          "n00",
          "[n00, n01]"
        ],
        "type": "string",
        "description": "A query graph node ID or list of such IDs to expand (default is to expand entire query graph)."
      },
      "prune_threshold": {
        "is_required": false,
        "type": "integer",
        "default": null,
        "examples": [
          500,
          2000
        ],
        "description": "The max number of nodes allowed to fulfill any intermediate QNode. Nodes in excess of this threshold will be pruned, using Fisher Exact Test to rank answers."
      },
      "kp_timeout": {
        "is_required": false,
        "type": "integer",
        "default": null,
        "examples": [
          30,
          120
        ],
        "description": "The number of seconds Expand will wait for a response from a KP before cutting the query off and proceeding without results from that KP."
      },
      "return_minimal_metadata": {
        "is_required": false,
        "examples": [
          "true",
          "false"
        ],
        "type": "boolean",
        "description": "Whether to omit supporting data on nodes/edges in the results (e.g., publications, description, etc.)."
      }
    },
    "description": "This command will expand (aka, answer/fill) your query graph in an edge-by-edge fashion, intelligently selecting which KPs to use for each edge. It selects KPs from the SmartAPI Registry based on the meta information provided by their TRAPI APIs, whether they have an endpoint running a matching TRAPI version, and whether they have an endpoint with matching maturity. For each QEdge, it queries the selected KPs concurrently; it will timeout for a particular KP if it decides it's taking too long to respond (this KP timeout can be controlled by the user). You may also optionally specify a particular KP to use via the 'kp' parameter (described below).\n\nCurrent candidate KPs include (for TRAPI 1.5, maturity 'development'): \ninfores:answer-coalesce, infores:automat-binding-db, infores:automat-cam-kp, infores:automat-ctd, infores:automat-drug-central, infores:automat-ehr-clinical-connections-kp, infores:automat-ehr-may-treat-kp, infores:automat-genome-alliance, infores:automat-gtex, infores:automat-gtopdb, infores:automat-gwas-catalog, infores:automat-hetionet, infores:automat-hgnc, infores:automat-hmdb, infores:automat-human-goa, infores:automat-icees-kg, infores:automat-intact, infores:automat-monarchinitiative, infores:automat-panther, infores:automat-pharos, infores:automat-reactome, infores:automat-robokop, infores:automat-string-db, infores:automat-ubergraph, infores:automat-viral-proteome, infores:cohd, infores:connections-hypothesis, infores:gelinea, infores:genetics-data-provider, infores:knowledge-collaboratory, infores:molepro, infores:multiomics-clinicaltrials, infores:multiomics-drugapprovals, infores:multiomics-microbiome, infores:multiomics-multiomics, infores:openpredict, infores:rtx-kg2, infores:service-provider-trapi, infores:spoke, infores:text-mining-provider-cooccurrence. \n\n(Note that this list of KPs may change unexpectedly based on the SmartAPI registry.)"
  },
  "overlay(action=add_node_pmids)": {
    "parameters": {
      "max_num": {
        "is_required": false,
        "examples": [
          "all",
          5,
          50
        ],
        "type": "int or string",
        "description": "The maximum number of values to return. Enter 'all' to return everything",
        "default": 100
      }
    },
    "description": "\nadd_node_pmids adds PubMed PMID's as node attributes to each node in the knowledge graph.\nThis information is obtained from mapping node identifiers to MeSH terms and obtaining which PubMed articles have this MeSH term\neither labeling in the metadata or has the MeSH term occurring in the abstract of the article.\n                    "
  },
  "overlay(action=compute_jaccard)": {
    "parameters": {
      "start_node_key": {
        "is_required": true,
        "examples": [
          "DOID:1872",
          "CHEBI:7476",
          "UMLS:C1764836"
        ],
        "type": "string",
        "description": "A curie id specifying the starting node"
      },
      "intermediate_node_key": {
        "is_required": true,
        "examples": [
          "DOID:1872",
          "CHEBI:7476",
          "UMLS:C1764836"
        ],
        "type": "string",
        "description": "A curie id specifying the intermediate node"
      },
      "end_node_key": {
        "is_required": true,
        "examples": [
          "DOID:1872",
          "CHEBI:7476",
          "UMLS:C1764836"
        ],
        "type": "string",
        "description": "A curie id specifying the ending node"
      },
      "virtual_relation_label": {
        "is_required": true,
        "examples": [
          "N1",
          "J2",
          "FET"
        ],
        "type": "string",
        "description": "An optional label to help identify the virtual edge in the relation field."
      }
    },
    "description": "\ncompute_jaccard creates virtual edges and adds an edge attribute (with the property name 'jaccard_index') containing the following information:\nThe jaccard similarity measures how many 'intermediate_node_key's are shared in common between each 'start_node_key' and 'object_node_key'.\nThis is used for purposes such as \"find me all drugs ('start_node_key') that have many proteins ('intermediate_node_key') in common with this disease ('end_node_key').\"\nThis can be used for downstream filtering to concentrate on relevant bioentities.\n                    "
  },
  "overlay(action=compute_ngd)": {
    "parameters": {
      "default_value": {
        "is_required": false,
        "examples": [
          "0",
          "inf"
        ],
        "default": "inf",
        "type": "string",
        "description": "The default value of the normalized Google distance (if its value cannot be determined)"
      },
      "virtual_relation_label": {
        "is_required": false,
        "examples": [
          "N1",
          "J2"
        ],
        "type": "string",
        "description": "An optional label to help identify the virtual edge in the relation field."
      },
      "subject_qnode_key": {
        "is_required": false,
        "examples": [
          "n00",
          "n01"
        ],
        "type": "string",
        "description": "A specific subject query node id (optional, otherwise applied to all edges, must have a virtual_relation_label to use this parameter)"
      },
      "object_qnode_key": {
        "is_required": false,
        "examples": [
          "n00",
          "n01"
        ],
        "type": "string",
        "description": "A specific object query node id (optional, otherwise applied to all edges, must have a virtual_relation_label to use this parameter)"
      }
    },
    "description": "\ncompute_ngd computes a metric (called the normalized Google distance) based on edge soure/object node co-occurrence in abstracts of all PubMed articles.\nThis information is then included as an edge attribute with the name normalized_google_distance.\nYou have the choice of applying this to all edges in the knowledge graph, or only between specified subject/object qnode id's. If the later, virtual edges are added with the type specified by virtual_relation_label.\n                    "
  },
  "overlay(action=fisher_exact_test)": {
    "parameters": {
      "subject_qnode_key": {
        "is_required": true,
        "examples": [
          "n00",
          "n01"
        ],
        "type": "string",
        "description": "A specific subject query node id (required)"
      },
      "virtual_relation_label": {
        "is_required": true,
        "examples": [
          "N1",
          "J2",
          "FET"
        ],
        "type": "string",
        "description": "An optional label to help identify the virtual edge in the relation field."
      },
      "object_qnode_key": {
        "is_required": true,
        "examples": [
          "n00",
          "n01"
        ],
        "type": "string",
        "description": "A specific object query node id (required)"
      },
      "rel_edge_key": {
        "is_required": false,
        "examples": [
          "e00",
          "e01"
        ],
        "type": "string",
        "description": "A specific QEdge id of edges connected to both subject nodes and object nodes in message KG (optional, otherwise all edges connected to both subject nodes and object nodes in message KG are considered), eg. 'e01'"
      },
      "filter_type": {
        "is_required": false,
        "examples": [
          "top_n",
          "cutoff",
          null
        ],
        "enum": [
          "top_n",
          "cutoff",
          null
        ],
        "type": "string or None",
        "description": "If `top_n` is set this indicate the top number (the smallest) of p-values will be returned acording to what is specified in the `value` parameter. If `cutoff` is set then this indicates the p-value cutoff should be used to return results acording to what is specified in the `value` parameter. (optional, otherwise all results returned)",
        "default": null,
        "depends_on": "value"
      },
      "value": {
        "is_required": false,
        "examples": [
          "all",
          0.05,
          0.95,
          5,
          50
        ],
        "type": "int or float or None",
        "description": "If `top_n` is set for `filter_type` this is an int indicating the top number (the smallest) of p-values to return. If instead `cutoff` is set then this is a float indicating the p-value cutoff to return the results. (optional, otherwise all results returned)",
        "default": null
      }
    },
    "description": "\nfisher_exact_test computes the Fisher's Exact Test p-values of the connection between a list of given nodes with specified query id (subject_qnode_key eg. 'n01') to their adjacent nodes with specified query id (e.g. object_qnode_key 'n02') in the message knowledge graph. \nThis information is then added as an edge attribute to a virtual edge which is then added to the query graph and knowledge graph.\nIt can also allow you to filter out the user-defined insignificance of connections based on a specified p-value cutoff or return the top n smallest p-value of connections and only add their corresponding virtual edges to the knowledge graph.\n                    "
  },
  "overlay(action=overlay_clinical_info)": {
    "parameters": {
      "COHD_method": {
        "is_required": false,
        "enum": [
          "paired_concept_frequency",
          "observed_expected_ratio",
          "chi_square"
        ],
        "default": "paired_concept_frequency",
        "type": "string",
        "description": "Which measure from COHD should be considered."
      },
      "virtual_relation_label": {
        "is_required": false,
        "examples": [
          "N1",
          "J2"
        ],
        "type": "string",
        "description": "An optional label to help identify the virtual edge in the relation field."
      },
      "subject_qnode_key": {
        "is_required": false,
        "examples": [
          "n00",
          "n01"
        ],
        "type": "string",
        "description": "A specific subject query node id (optional, otherwise applied to all edges, must have a virtual_relation_label to use this parameter)"
      },
      "object_qnode_key": {
        "is_required": false,
        "examples": [
          "n00",
          "n01"
        ],
        "type": "string",
        "description": "A specific object query node id (optional, otherwise applied to all edges, must have a virtual_relation_label to use this parameter)"
      }
    },
    "description": "\noverlay_clinical_info overlay edges with information obtained from the knowledge provider (KP) Columbia Open Health Data (COHD).\nThis KP has a number of different functionalities, such as 'paired_concept_frequency', 'observed_expected_ratio', etc. which are mutually exclusive DSL parameters.\nAll information is derived from a 5 year hierarchical dataset: Counts for each concept include patients from descendant concepts. \nThis includes clinical data from 2013-2017 and includes 1,731,858 different patients.\nThis information is then included as an edge attribute.\n                    "
  },
  "overlay(action=overlay_exposures_data)": {
    "parameters": {
      "virtual_relation_label": {
        "is_required": false,
        "examples": [
          "N1",
          "J2"
        ],
        "type": "string",
        "description": "An optional label to help identify the virtual edge in the relation field."
      },
      "subject_qnode_key": {
        "is_required": false,
        "examples": [
          "n00",
          "n01"
        ],
        "type": "string",
        "description": "A specific subject query node id (optional, otherwise applied to all edges, must have a virtual_relation_label to use this parameter)"
      },
      "object_qnode_key": {
        "is_required": false,
        "examples": [
          "n00",
          "n01"
        ],
        "type": "string",
        "description": "A specific object query node id (optional, otherwise applied to all edges, must have a virtual_relation_label to use this parameter)"
      }
    },
    "description": "\noverlay_exposures_data overlays edges with p-values obtained from the ICEES+ (Integrated Clinical and Environmental Exposures Service) knowledge provider.\nThis information is included in edge attributes with the name 'icees_p-value'.\n                    "
  },
  "filter_kg(action=remove_edges_by_continuous_attribute)": {
    "parameters": {
      "edge_attribute": {
        "is_required": true,
        "examples": [
          "jaccard_index",
          "observed_expected_ratio",
          "normalized_google_distance"
        ],
        "type": "string",
        "description": "The name of the edge attribute to filter on."
      },
      "direction": {
        "is_required": true,
        "enum": [
          "above",
          "below"
        ],
        "type": "string",
        "description": "Indictes whether to remove above or below the given threshold."
      },
      "threshold": {
        "is_required": true,
        "examples": [
          5,
          0.45
        ],
        "min": "-inf",
        "max": "inf",
        "type": "float",
        "description": "The threshold to filter with."
      },
      "remove_connected_nodes": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicates whether or not to remove the nodes connected to the edge.",
        "default": "false"
      },
      "qnode_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If remove_connected_nodes is set to True this indicates if you only want nodes corresponding to one of the listed qnode_keys to be removed.If not provided the qnode_key will not be considered when filtering."
      },
      "qedge_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If included this indicates if you only want edge with one of the listed qedge_keys to be removed.If not provided the qedge_key will not be considered when filtering."
      }
    },
    "description": "\nremove_edges_by_continuous_attribute removes edges from the knowledge graph (KG) based on a a certain edge attribute.\nEdge attributes are a list of additional attributes for an edge.\nThis action interacts particularly well with overlay() as overlay() frequently adds additional edge attributes.\n                    "
  },
  "filter_kg(action=remove_edges_by_discrete_attribute)": {
    "parameters": {
      "edge_attribute": {
        "is_required": true,
        "examples": [
          "subject",
          "provided_by",
          "is_defined_by"
        ],
        "type": "string",
        "description": "The name of the edge property to filter on."
      },
      "value": {
        "is_required": true,
        "examples": [
          "DOID:8398",
          "Pharos",
          "ARAX/RTX"
        ],
        "type": "string",
        "description": "The edge property value to indicate which edges to remove."
      },
      "remove_connected_nodes": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicates whether or not to remove the nodes connected to the edge.",
        "default": "false"
      },
      "qnode_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If remove_connected_nodes is set to True this indicates if you only want nodes corresponding to one of the listed qnode_keys to be removed.If not provided the qnode_key will not be considered when filtering."
      },
      "qedge_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If included this indicates if you only want edge with one of the listed qedge_keys to be removed.If not provided the qedge_key will not be considered when filtering."
      }
    },
    "description": "\nremove_edges_by_discrete_attribute removes edges from the knowledge graph (KG) based on a given edge property.\n                    "
  },
  "filter_kg(action=remove_edges_by_percentile)": {
    "parameters": {
      "edge_attribute": {
        "is_required": true,
        "examples": [
          "jaccard_index",
          "observed_expected_ratio",
          "normalized_google_distance"
        ],
        "type": "string",
        "description": "The name of the edge attribute to filter on."
      },
      "direction": {
        "is_required": false,
        "enum": [
          "above",
          "below"
        ],
        "type": "string",
        "description": "Indictes whether to remove above or below the given threshold.",
        "default": "a value dictated by the `edge_attribute` parameter. If `edge attribute` is 'ngd', 'chi_square', 'fisher_exact', or 'normalized_google_distance' then `direction` defaults to above. If `edge_attribute` is 'jaccard_index', 'observed_expected_ratio', 'probability_treats' or anything else not listed then `direction` defaults to below."
      },
      "threshold": {
        "is_required": false,
        "examples": [
          5,
          0.45
        ],
        "min": 0,
        "max": 100,
        "type": "float",
        "description": "95 unless `edge_attribute` is also 'ngd', 'chi_square', 'fisher_exact', or 'normalized_google_distance' then `threshold` will default to 5."
      },
      "top": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicate whether or not the threshold should be placed in top of the list. E.g. top set as True with type set as std_dev will set the cutoff for filtering as the mean + threshold * std_dev while setting top to False will set the cutoff as the mean - std_dev * threshold.",
        "default": "a value dictated by the `edge_attribute` parameter. If `edge attribute` is 'ngd', 'chi_square', 'fisher_exact', or 'normalized_google_distance' then `top` defaults to False. If `edge_attribute` is 'jaccard_index', 'observed_expected_ratio', 'probability_treats' or anything else not listed then `top` defaults to True."
      },
      "remove_connected_nodes": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicates whether or not to remove the nodes connected to the edge.",
        "default": "false"
      },
      "qnode_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If remove_connected_nodes is set to True this indicates if you only want nodes corresponding to one of the listed qnode_keys to be removed.If not provided the qnode_key will not be considered when filtering."
      },
      "qedge_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If included this indicates if you only want edge with one of the listed qedge_keys to be removed.If not provided the qedge_key will not be considered when filtering."
      }
    },
    "description": "\nremove_edges_by_percentile removes edges from the knowledge graph (KG) based on a certain edge attribute using default heuristics.\nEdge attributes are a list of additional attributes for an edge.\nThis action interacts particularly well with overlay() as overlay() frequently adds additional edge attributes.\n                    "
  },
  "filter_kg(action=remove_edges_by_predicate)": {
    "parameters": {
      "edge_predicate": {
        "is_required": true,
        "examples": [
          "contraindicated_for",
          "affects",
          "expressed_in"
        ],
        "type": "ARAXedge",
        "description": "The name of the edge predicate to filter by."
      },
      "remove_connected_nodes": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicates whether or not to remove the nodes connected to the edge.",
        "default": "false"
      },
      "qnode_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If remove_connected_nodes is set to True this indicates if you only want nodes corresponding to one of the listed qnode_keys to be removed.If not provided the qnode_key will not be considered when filtering."
      },
      "qedge_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If included this indicates if you only want edge with one of the listed qedge_keys to be removed.If not provided the qedge_key will not be considered when filtering."
      }
    },
    "description": "\nremove_edges_by_predicate removes edges from the knowledge graph (KG) based on a given edge predicate.\n                    "
  },
  "filter_kg(action=remove_edges_by_std_dev)": {
    "parameters": {
      "edge_attribute": {
        "is_required": true,
        "examples": [
          "jaccard_index",
          "observed_expected_ratio",
          "normalized_google_distance"
        ],
        "type": "string",
        "description": "The name of the edge attribute to filter on."
      },
      "direction": {
        "is_required": false,
        "enum": [
          "above",
          "below"
        ],
        "type": "string",
        "description": "Indictes whether to remove above or below the given threshold.",
        "default": "a value dictated by the `edge_attribute` parameter. If `edge attribute` is 'ngd', 'chi_square', 'fisher_exact', or 'normalized_google_distance' then `direction` defaults to above. If `edge_attribute` is 'jaccard_index', 'observed_expected_ratio', 'probability_treats' or anything else not listed then `direction` defaults to below."
      },
      "threshold": {
        "is_required": false,
        "examples": [
          1,
          0.45
        ],
        "min": 0,
        "max": "inf",
        "type": "float",
        "description": "The threshold to filter with.",
        "default": 1
      },
      "top": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicate whether or not the threshold should be placed in top of the list. E.g. top set as True with type set as std_dev will set the cutoff for filtering as the mean + threshold * std_dev while setting top to False will set the cutoff as the mean - std_dev * threshold.",
        "default": "a value dictated by the `edge_attribute` parameter. If `edge attribute` is 'ngd', 'chi_square', 'fisher_exact', or 'normalized_google_distance' then `top` defaults to False. If `edge_attribute` is 'jaccard_index', 'observed_expected_ratio', 'probability_treats' or anything else not listed then `top` defaults to True."
      },
      "remove_connected_nodes": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicates whether or not to remove the nodes connected to the edge.",
        "default": "false"
      },
      "qnode_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If remove_connected_nodes is set to True this indicates if you only want nodes corresponding to one of the listed qnode_keys to be removed.If not provided the qnode_key will not be considered when filtering."
      },
      "qedge_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If included this indicates if you only want edge with one of the listed qedge_keys to be removed.If not provided the qedge_key will not be considered when filtering."
      }
    },
    "description": "\nremove_edges_by_std_dev removes edges from the knowledge graph (KG) based on a certain edge attribute using default heuristics and the standard deviation of the values.\nEdge attributes are a list of additional attributes for an edge.\nThis action interacts particularly well with overlay() as overlay() frequently adds additional edge attributes.\n                    "
  },
  "filter_kg(action=remove_edges_by_top_n)": {
    "parameters": {
      "edge_attribute": {
        "is_required": true,
        "examples": [
          "jaccard_index",
          "observed_expected_ratio",
          "normalized_google_distance"
        ],
        "type": "string",
        "description": "The name of the edge attribute to filter on."
      },
      "direction": {
        "is_required": false,
        "enum": [
          "above",
          "below"
        ],
        "type": "string",
        "description": "Indictes whether to remove above or below the given threshold.",
        "default": "a value dictated by the `edge_attribute` parameter. If `edge attribute` is 'ngd', 'chi_square', 'fisher_exact', or 'normalized_google_distance' then `direction` defaults to above. If `edge_attribute` is 'jaccard_index', 'observed_expected_ratio', 'probability_treats' or anything else not listed then `direction` defaults to below."
      },
      "n": {
        "is_required": false,
        "examples": [
          5,
          10,
          50
        ],
        "min": 0,
        "max": "inf",
        "type": "int",
        "description": "The threshold to filter with.",
        "default": 50
      },
      "top": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicate whether or not the threshold should be placed in top of the list. E.g. top set as True with type set as std_dev will set the cutoff for filtering as the mean + threshold * std_dev while setting top to False will set the cutoff as the mean - std_dev * threshold.",
        "default": "a value dictated by the `edge_attribute` parameter. If `edge attribute` is 'ngd', 'chi_square', 'fisher_exact', or 'normalized_google_distance' then `top` defaults to False. If `edge_attribute` is 'jaccard_index', 'observed_expected_ratio', 'probability_treats' or anything else not listed then `top` defaults to True."
      },
      "remove_connected_nodes": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicates whether or not to remove the nodes connected to the edge.",
        "default": "false"
      },
      "qnode_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If remove_connected_nodes is set to True this indicates if you only want nodes corresponding to one of the listed qnode_keys to be removed.If not provided the qnode_key will not be considered when filtering."
      },
      "qedge_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "If included this indicates if you only want edge with one of the listed qedge_keys to be removed.If not provided the qedge_key will not be considered when filtering."
      }
    },
    "description": "\nremove_edges_by_top_n removes edges from the knowledge graph (KG) based on a certain edge attribute using default heuristics.\nEdge attributes are a list of additional attributes for an edge.\nThis action interacts particularly well with overlay() as overlay() frequently adds additional edge attributes.\n                    "
  },
  "filter_kg(action=remove_general_concept_nodes)": {
    "parameters": {
      "perform_action": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "Indicate whether or not to remove general concept nodes",
        "default": "True"
      }
    },
    "description": "\nremove_general_concept_nodes removes nodes from the knowledge graph (KG) that are general concepts.\n                    "
  },
  "filter_kg(action=remove_nodes_by_category)": {
    "parameters": {
      "node_category": {
        "is_required": true,
        "examples": [
          "chemical_substance",
          "disease"
        ],
        "type": "ARAXnode",
        "description": "The name of the node category to filter by."
      }
    },
    "description": "\nremove_node_by_category removes nodes from the knowledge graph (KG) based on a given node category.\n                    "
  },
  "filter_kg(action=remove_nodes_by_property)": {
    "parameters": {
      "node_property": {
        "is_required": true,
        "examples": [
          "provided_by",
          "is_defined_by"
        ],
        "type": "string",
        "description": "The name of the node property to filter on."
      },
      "property_value": {
        "is_required": true,
        "examples": [
          "Pharos",
          "ARAX/RTX"
        ],
        "type": "string",
        "description": "The node property vaue to indicate which nodes to remove."
      }
    },
    "description": "\nremove_nodes_by_property removes nodes from the knowledge graph (KG) based on a given node property.\n                    "
  },
  "filter_kg(action=remove_orphaned_nodes)": {
    "parameters": {
      "node_category": {
        "is_required": false,
        "examples": [
          "chemical_substance",
          "disease"
        ],
        "type": "ARAXnode",
        "description": "The name of the node category to filter by. If no value provided node category will not be considered."
      }
    },
    "description": "\nremove_orphaned_nodes removes nodes from the knowledge graph (KG) that are not connected via any edges.\nSpecifying a 'node_category' will restrict this to only remove orphaned nodes of a certain category.\nThis can be applied to an arbitrary knowledge graph as possible node categories are computed dynamically (i.e. not just those created/recognized by the ARA Expander team).\n                    "
  },
  "filter_results(action=limit_number_of_results)": {
    "parameters": {
      "max_results": {
        "is_required": true,
        "examples": [
          5,
          10,
          50
        ],
        "min": 0,
        "max": "inf",
        "type": "int",
        "description": "The maximum number of results to return. If not provided all results will be returned."
      },
      "prune_kg": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "This indicates if the Knowledge Graph (KG) should be pruned so that any nodes or edges not appearing in the results are removed from the KG.",
        "default": "true"
      }
    },
    "description": "\nlimit_number_of_results removes excess results over the specified maximum.\n                    "
  },
  "filter_results(action=sort_by_edge_attribute)": {
    "parameters": {
      "edge_attribute": {
        "is_required": true,
        "examples": [
          "jaccard_index",
          "observed_expected_ratio",
          "normalized_google_distance"
        ],
        "type": "string",
        "description": "The name of the attribute to filter by."
      },
      "edge_relation": {
        "is_required": false,
        "examples": [
          "N1",
          "C1"
        ],
        "type": "string",
        "description": "The name of unique identifier to only filter on edges with matching virtual relation label attribute.If not provided the edge relation will not be considered when filtering."
      },
      "direction": {
        "is_required": true,
        "enum": [
          "descending",
          "d",
          "ascending",
          "a"
        ],
        "type": "string",
        "description": "The direction in which to order results. (ascending or descending)"
      },
      "max_results": {
        "is_required": false,
        "examples": [
          5,
          10,
          50
        ],
        "min": 0,
        "max": "inf",
        "type": "int",
        "description": "The maximum number of results to return. If not provided all results will be returned."
      },
      "prune_kg": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "This indicates if the Knowledge Graph (KG) should be pruned so that any nodes or edges not appearing in the results are removed from the KG.",
        "default": "true"
      },
      "qedge_keys": {
        "is_required": false,
        "examples": [
          [
            "e00",
            "e01"
          ],
          []
        ],
        "type": "list",
        "description": "This indicates if you only want to sort by edges corresponding to one of the listed qedge_keys.If not provided the qedge_key will not be considered when sorting."
      }
    },
    "description": "\nsort_by_edge_attribute sorts the results by the edges based on a a certain edge attribute.\nEdge attributes are a list of additional attributes for an edge.\n                    "
  },
  "filter_results(action=sort_by_edge_count)": {
    "parameters": {
      "direction": {
        "is_required": true,
        "enum": [
          "descending",
          "d",
          "ascending",
          "a"
        ],
        "type": "string",
        "description": "The direction in which to order results. (ascending or descending)"
      },
      "max_results": {
        "is_required": false,
        "examples": [
          5,
          10,
          50
        ],
        "min": 0,
        "max": "inf",
        "type": "int",
        "description": "The maximum number of results to return. If not provided all results will be returned."
      },
      "prune_kg": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "This indicates if the Knowledge Graph (KG) should be pruned so that any nodes or edges not appearing in the results are removed from the KG.",
        "default": "true"
      }
    },
    "description": "\nsort_by_edge_count sorts the results by the number of edges in the results.\n                    "
  },
  "filter_results(action=sort_by_node_attribute)": {
    "parameters": {
      "node_attribute": {
        "is_required": true,
        "examples": [
          "pubmed_ids"
        ],
        "type": "string",
        "description": "The name of the attribute to filter by."
      },
      "node_category": {
        "is_required": false,
        "examples": [
          "chemical_substance",
          "disease"
        ],
        "type": "ARAXnode",
        "description": "The name of the node category to only filter on nodes of the matching category. If not provided the node category will not be considered when filtering."
      },
      "direction": {
        "is_required": true,
        "enum": [
          "descending",
          "d",
          "ascending",
          "a"
        ],
        "type": "string",
        "description": "The direction in which to order results. (ascending or descending)"
      },
      "max_results": {
        "is_required": false,
        "examples": [
          5,
          10,
          50
        ],
        "min": 0,
        "max": "inf",
        "type": "int",
        "description": "The maximum number of results to return. If not provided all results will be returned."
      },
      "prune_kg": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "This indicates if the Knowledge Graph (KG) should be pruned so that any nodes or edges not appearing in the results are removed from the KG.",
        "default": "true"
      },
      "qnode_keys": {
        "is_required": false,
        "examples": [
          [
            "n01",
            "n02"
          ],
          []
        ],
        "type": "list",
        "description": "This indicates if you only want to sort by nodes corresponding to one of the listed qnode_keys.If not provided the qnode_key will not be considered when sorting."
      }
    },
    "description": "\nsort_by_node_attribute sorts the results by the nodes based on a a certain node attribute.\nNode attributes are a list of additional attributes for an node.\n                    "
  },
  "filter_results(action=sort_by_node_count)": {
    "parameters": {
      "direction": {
        "is_required": true,
        "enum": [
          "descending",
          "d",
          "ascending",
          "a"
        ],
        "type": "string",
        "description": "The direction in which to order results. (ascending or descending)"
      },
      "max_results": {
        "is_required": false,
        "examples": [
          5,
          10,
          50
        ],
        "min": 0,
        "max": "inf",
        "type": "int",
        "description": "The maximum number of results to return. If not provided all results will be returned."
      },
      "prune_kg": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "This indicates if the Knowledge Graph (KG) should be pruned so that any nodes or edges not appearing in the results are removed from the KG.",
        "default": "true"
      }
    },
    "description": "\nsort_by_node_count sorts the results by the number of nodes in the results.\n                    "
  },
  "filter_results(action=sort_by_score)": {
    "parameters": {
      "direction": {
        "is_required": true,
        "enum": [
          "descending",
          "d",
          "ascending",
          "a"
        ],
        "type": "string",
        "description": "The direction in which to order results. (ascending or descending)"
      },
      "max_results": {
        "is_required": false,
        "examples": [
          5,
          10,
          50
        ],
        "min": 0,
        "max": "inf",
        "type": "int",
        "description": "The maximum number of results to return. If not provided all results will be returned."
      },
      "prune_kg": {
        "is_required": false,
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "type": "boolean",
        "description": "This indicates if the Knowledge Graph (KG) should be pruned so that any nodes or edges not appearing in the results are removed from the KG.",
        "default": "true"
      }
    },
    "description": "\nsort_by_score sorts the results by the number of edges in the results.\n                    "
  },
  "resultify()": {
    "parameters": {
      "ignore_edge_direction": {
        "is_required": false,
        "examples": [
          "true",
          "false"
        ],
        "enum": [
          "true",
          "false",
          "True",
          "False",
          "t",
          "f",
          "T",
          "F"
        ],
        "default": "true",
        "type": "boolean",
        "description": "Whether to ignore (vs. obey) edge directions in the query graph when identifying paths that fulfill it."
      }
    },
    "description": "Creates a list of results consisting of subgraphs from the message knowledge graph that satisfy the query graph."
  },
  "rank_results()": {
    "parameters": {},
    "description": "\nrank_results iterates through all edges in the results list aggrigating and \nnormalizing the scores stored within the edge_attributes property. After combining these scores into \none score the ranker then scores each result through a combination of max flow, longest path, \nand frobenius norm.\n        "
  },
  "connect(action=connect_nodes)": {
    "parameters": {
      "max_path_length": {
        "is_required": false,
        "examples": [
          2,
          3,
          5
        ],
        "min": 1,
        "max": 5,
        "type": "integer",
        "description": "The maximum edges to connect two nodes with. If not provided defaults to 4."
      }
    },
    "description": "connect_nodes adds paths between two nodes specified in the query."
  },
  "infer(action=chemical_gene_regulation_graph_expansion)": {
    "parameters": {
      "subject_curie": {
        "is_required": true,
        "examples": [
          "UMLS:C1440117",
          "MESH:D007053",
          "CHEMBL.COMPOUND:CHEMBL33884"
        ],
        "type": "string",
        "description": "The chemical curie, a curie with category of either 'biolink:ChemicalEntity', 'biolink:ChemicalMixture', or 'biolink:SmallMolecule'. **Note that although this parameter is said to be required, exactly one of `subject_curie` or `object_curie` is required as a parameter rather than both.**"
      },
      "object_curie": {
        "is_required": true,
        "examples": [
          "UniProtKB:Q96P20",
          "UniProtKB:O75807",
          "NCBIGene:406983"
        ],
        "type": "string",
        "description": "The gene curie, a curie with category of either 'biolink:Gene' or 'biolink:Protein'. **Note that although this parameter is said to be required, exactly one of `subject_curie` or `object_curie` is required as a parameter rather than both.**"
      },
      "subject_qnode_id": {
        "is_required": true,
        "examples": [
          "n01",
          "n02"
        ],
        "type": "string",
        "description": "The query graph node ID of a chemical. **Note that although this parameter is said to be required, this parameter is valid only when a query graph is used. Additionally, exactly one of 'subject_qnode_id' or 'object_qnode_id' is required when a query graph is used.**"
      },
      "object_qnode_id": {
        "is_required": true,
        "examples": [
          "n01",
          "n02"
        ],
        "type": "string",
        "description": "The query graph node ID of a gene. **Note that although this parameter is said to be required, this parameter is valid only when a query graph is used. Additionally, exactly one of 'subject_qnode_id' or 'object_qnode_id' is required when a query graph is used.**"
      },
      "qedge_id": {
        "is_required": false,
        "examples": [
          "qedge_id_1",
          "qedge_id_2",
          "qedge_id_3"
        ],
        "type": "string",
        "description": "The id of the qedge you wish to perform the chemical-gene regulation inference expansion."
      },
      "threshold": {
        "is_required": false,
        "examples": [
          0.3,
          0.5,
          0.8
        ],
        "default": 0.5,
        "type": "float",
        "description": "Threshold to filter the prediction probability. If not provided defaults to 0.5."
      },
      "kp": {
        "is_required": false,
        "examples": [
          "infores:rtx-kg2",
          null
        ],
        "default": "infores:rtx-kg2",
        "type": "string",
        "description": "KP to use in path extraction. If not provided defaults to 'infores:rtx-kg2'."
      },
      "path_len": {
        "is_required": false,
        "examples": [
          2,
          3,
          4
        ],
        "default": 2,
        "type": "integer",
        "description": "The length of paths for prediction. If not provided defaults to 2."
      },
      "regulation_type": {
        "is_required": false,
        "examples": [
          "n01",
          "n02"
        ],
        "default": "increase",
        "type": "string",
        "description": "What model (increased prediction or decreased prediction) to consult."
      },
      "n_result_curies": {
        "is_required": false,
        "examples": [
          5,
          50,
          100
        ],
        "default": 10,
        "type": "integer",
        "description": "The number of top predicted result nodes to return. If not provided defaults to 10."
      },
      "n_paths": {
        "is_required": false,
        "examples": [
          5,
          50,
          100
        ],
        "default": 10,
        "type": "integer",
        "description": "The number of paths connecting to each returned node. If not provided defaults to 10."
      }
    },
    "description": "\nchemical_gene_regulation_graph_expansion predicts the regulation relationship between given chemicals and/or given genes and provides along with an explination graph for each prediction. Note that one of subject_curie (curie with category 'chemicalentity/chemicalmixture/smallmodule') or object_curie (curie with category 'gene/protein') is required as a parameter, However, when a query graph is used via DSL command or JSON format, the parameters 'subject_curie' and 'object_curie' can be omitted but one of 'subject_qnode_id' or 'object_qnode_id' need to be specified.\n                    "
  },
  "infer(action=drug_treatment_graph_expansion)": {
    "parameters": {
      "drug_curie": {
        "is_required": true,
        "examples": [
          "CHEMBL.COMPOUND:CHEMBL55643",
          "CHEBI:8378",
          "RXNORM:1011"
        ],
        "type": "string",
        "description": "The CURIE for a drug node used to predict what potential diseases it may treat."
      },
      "disease_curie": {
        "is_required": true,
        "examples": [
          "DOID:9352",
          "MONDO:0005306",
          "HP:0001945"
        ],
        "type": "string",
        "description": "The CURIE for a disease node used to predict what potential drugs can potentially treat it."
      },
      "qedge_id": {
        "is_required": false,
        "examples": [
          "qedge_id_1",
          "qedge_id_2",
          "qedge_id_3"
        ],
        "type": "string",
        "description": "The id of the qedge you wish to perform the drug-disease treatment inference expansion."
      },
      "n_drugs": {
        "is_required": false,
        "examples": [
          5,
          15,
          25
        ],
        "default": 50,
        "type": "integer",
        "description": "Given an interested disease CURIE, the number of drug nodes to return. If not provided defaults to 50. Considering the response speed, the maximum number of drugs returned is only allowed to be 50."
      },
      "n_diseases": {
        "is_required": false,
        "examples": [
          5,
          15,
          25
        ],
        "default": 50,
        "type": "integer",
        "description": "Given an interested drug CURIE, The number of disease nodes to return. If not provided defaults to 50. Considering the response speed, the maximum number of diseases returned is only allowed to be 50."
      },
      "n_paths": {
        "is_required": false,
        "examples": [
          5,
          15,
          25
        ],
        "default": 25,
        "type": "integer",
        "description": "The number of paths connecting to each returned node. If not provided defaults to 25. Considering the response speed, the maximum number of paths (if available) returned is only allowed to be 25."
      }
    },
    "description": "\ndrug_treatment_graph_expansion predicts drug treatments for a given node curie and provides along with an explination graph for each prediction.\n                    "
  }
}
