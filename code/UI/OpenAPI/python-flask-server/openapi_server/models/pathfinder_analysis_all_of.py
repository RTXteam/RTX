# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.path_binding import PathBinding
from openapi_server import util

from openapi_server.models.path_binding import PathBinding  # noqa: E501

class PathfinderAnalysisAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path_bindings=None):  # noqa: E501
        """PathfinderAnalysisAllOf - a model defined in OpenAPI

        :param path_bindings: The path_bindings of this PathfinderAnalysisAllOf.  # noqa: E501
        :type path_bindings: Dict[str, List[PathBinding]]
        """
        self.openapi_types = {
            'path_bindings': Dict[str, List[PathBinding]]
        }

        self.attribute_map = {
            'path_bindings': 'path_bindings'
        }

        self._path_bindings = path_bindings

    @classmethod
    def from_dict(cls, dikt) -> 'PathfinderAnalysisAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PathfinderAnalysis_allOf of this PathfinderAnalysisAllOf.  # noqa: E501
        :rtype: PathfinderAnalysisAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path_bindings(self):
        """Gets the path_bindings of this PathfinderAnalysisAllOf.

        The dictionary of input Query Graph paths to Analysis paths, specifically only for pathfinder queries.  # noqa: E501

        :return: The path_bindings of this PathfinderAnalysisAllOf.
        :rtype: Dict[str, List[PathBinding]]
        """
        return self._path_bindings

    @path_bindings.setter
    def path_bindings(self, path_bindings):
        """Sets the path_bindings of this PathfinderAnalysisAllOf.

        The dictionary of input Query Graph paths to Analysis paths, specifically only for pathfinder queries.  # noqa: E501

        :param path_bindings: The path_bindings of this PathfinderAnalysisAllOf.
        :type path_bindings: Dict[str, List[PathBinding]]
        """
        if path_bindings is None:
            raise ValueError("Invalid value for `path_bindings`, must not be `None`")  # noqa: E501

        self._path_bindings = path_bindings
