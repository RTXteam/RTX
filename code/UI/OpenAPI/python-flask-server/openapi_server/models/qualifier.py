# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Qualifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, qualifier_type_id=None, qualifier_value=None):  # noqa: E501
        """Qualifier - a model defined in OpenAPI

        :param qualifier_type_id: The qualifier_type_id of this Qualifier.  # noqa: E501
        :type qualifier_type_id: str
        :param qualifier_value: The qualifier_value of this Qualifier.  # noqa: E501
        :type qualifier_value: str
        """
        self.openapi_types = {
            'qualifier_type_id': str,
            'qualifier_value': str
        }

        self.attribute_map = {
            'qualifier_type_id': 'qualifier_type_id',
            'qualifier_value': 'qualifier_value'
        }

        self._qualifier_type_id = qualifier_type_id
        self._qualifier_value = qualifier_value

    @classmethod
    def from_dict(cls, dikt) -> 'Qualifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Qualifier of this Qualifier.  # noqa: E501
        :rtype: Qualifier
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qualifier_type_id(self):
        """Gets the qualifier_type_id of this Qualifier.

        The category of the qualifier, drawn from a hierarchy of qualifier slots in the Biolink model (e.g. subject_aspect, subject_direction, object_aspect, object_direction, etc).  # noqa: E501

        :return: The qualifier_type_id of this Qualifier.
        :rtype: str
        """
        return self._qualifier_type_id

    @qualifier_type_id.setter
    def qualifier_type_id(self, qualifier_type_id):
        """Sets the qualifier_type_id of this Qualifier.

        The category of the qualifier, drawn from a hierarchy of qualifier slots in the Biolink model (e.g. subject_aspect, subject_direction, object_aspect, object_direction, etc).  # noqa: E501

        :param qualifier_type_id: The qualifier_type_id of this Qualifier.
        :type qualifier_type_id: str
        """
        if qualifier_type_id is None:
            raise ValueError("Invalid value for `qualifier_type_id`, must not be `None`")  # noqa: E501

        self._qualifier_type_id = qualifier_type_id

    @property
    def qualifier_value(self):
        """Gets the qualifier_value of this Qualifier.

        The value associated with the type of the qualifier, drawn from a set of controlled values by the type as specified in the Biolink model (e.g. 'expression' or 'abundance' for the qualifier type 'subject_aspect', etc).  # noqa: E501

        :return: The qualifier_value of this Qualifier.
        :rtype: str
        """
        return self._qualifier_value

    @qualifier_value.setter
    def qualifier_value(self, qualifier_value):
        """Sets the qualifier_value of this Qualifier.

        The value associated with the type of the qualifier, drawn from a set of controlled values by the type as specified in the Biolink model (e.g. 'expression' or 'abundance' for the qualifier type 'subject_aspect', etc).  # noqa: E501

        :param qualifier_value: The qualifier_value of this Qualifier.
        :type qualifier_value: str
        """
        if qualifier_value is None:
            raise ValueError("Invalid value for `qualifier_value`, must not be `None`")  # noqa: E501

        self._qualifier_value = qualifier_value
