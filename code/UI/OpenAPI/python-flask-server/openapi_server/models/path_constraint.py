# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PathConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intermediate_categories=None):  # noqa: E501
        """PathConstraint - a model defined in OpenAPI

        :param intermediate_categories: The intermediate_categories of this PathConstraint.  # noqa: E501
        :type intermediate_categories: List[str]
        """
        self.openapi_types = {
            'intermediate_categories': List[str]
        }

        self.attribute_map = {
            'intermediate_categories': 'intermediate_categories'
        }

        self._intermediate_categories = intermediate_categories

    @classmethod
    def from_dict(cls, dikt) -> 'PathConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PathConstraint of this PathConstraint.  # noqa: E501
        :rtype: PathConstraint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intermediate_categories(self):
        """Gets the intermediate_categories of this PathConstraint.

        A list of Biolink model categories by which to constrain paths returned. If multiple categories are listed, it should be interpreted as an AND relationship. Each path returned by ARAs MUST contain at least one node of each category listed.  # noqa: E501

        :return: The intermediate_categories of this PathConstraint.
        :rtype: List[str]
        """
        return self._intermediate_categories

    @intermediate_categories.setter
    def intermediate_categories(self, intermediate_categories):
        """Sets the intermediate_categories of this PathConstraint.

        A list of Biolink model categories by which to constrain paths returned. If multiple categories are listed, it should be interpreted as an AND relationship. Each path returned by ARAs MUST contain at least one node of each category listed.  # noqa: E501

        :param intermediate_categories: The intermediate_categories of this PathConstraint.
        :type intermediate_categories: List[str]
        """
        if intermediate_categories is not None and len(intermediate_categories) > 1:
            raise ValueError("Invalid value for `intermediate_categories`, number of items must be less than or equal to `1`")  # noqa: E501
        if intermediate_categories is not None and len(intermediate_categories) < 1:
            raise ValueError("Invalid value for `intermediate_categories`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._intermediate_categories = intermediate_categories
