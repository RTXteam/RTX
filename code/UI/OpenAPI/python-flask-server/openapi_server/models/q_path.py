# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.attribute_constraint import AttributeConstraint
from openapi_server.models.qualifier_constraint import QualifierConstraint
from openapi_server import util

from openapi_server.models.attribute_constraint import AttributeConstraint  # noqa: E501

class QPath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, predicates=None, subject=None, object=None, attribute_constraints=[], intermediate_nodes=[]):  # noqa: E501
        """QPath - a model defined in OpenAPI

        :param predicates: The predicates of this QPath.  # noqa: E501
        :type predicates: List[str]
        :param subject: The subject of this QPath.  # noqa: E501
        :type subject: str
        :param object: The object of this QPath.  # noqa: E501
        :type object: str
        :param attribute_constraints: The attribute_constraints of this QPath.  # noqa: E501
        :type attribute_constraints: List[AttributeConstraint]
        :param intermediate_nodes: The intermediate_nodes of this QPath.  # noqa: E501
        :type intermediate_nodes: List[str]
        """
        self.openapi_types = {
            'predicates': List[str],
            'subject': str,
            'object': str,
            'attribute_constraints': List[AttributeConstraint],
            'intermediate_nodes': List[str]
        }

        self.attribute_map = {
            'predicates': 'predicates',
            'subject': 'subject',
            'object': 'object',
            'attribute_constraints': 'attribute_constraints',
            'intermediate_nodes': 'intermediate_nodes'
        }

        self._predicates = predicates
        self._subject = subject
        self._object = object
        self._attribute_constraints = attribute_constraints
        self._intermediate_nodes = intermediate_nodes

    @classmethod
    def from_dict(cls, dikt) -> 'QPath':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QPath of this QPath.  # noqa: E501
        :rtype: QPath
        """
        return util.deserialize_model(dikt, cls)

    @property
    def predicates(self):
        """Gets the predicates of this QPath.


        :return: The predicates of this QPath.
        :rtype: List[str]
        """
        return self._predicates

    @predicates.setter
    def predicates(self, predicates):
        """Sets the predicates of this QPath.


        :param predicates: The predicates of this QPath.
        :type predicates: List[str]
        """
        if predicates is not None and len(predicates) < 1:
            raise ValueError("Invalid value for `predicates`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._predicates = predicates

    @property
    def subject(self):
        """Gets the subject of this QPath.

        Corresponds to the map key identifier of the subject concept node anchoring the query filter pattern for the query relationship edge.  # noqa: E501

        :return: The subject of this QPath.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this QPath.

        Corresponds to the map key identifier of the subject concept node anchoring the query filter pattern for the query relationship edge.  # noqa: E501

        :param subject: The subject of this QPath.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def object(self):
        """Gets the object of this QPath.

        Corresponds to the map key identifier of the object concept node anchoring the query filter pattern for the query relationship edge.  # noqa: E501

        :return: The object of this QPath.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this QPath.

        Corresponds to the map key identifier of the object concept node anchoring the query filter pattern for the query relationship edge.  # noqa: E501

        :param object: The object of this QPath.
        :type object: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def attribute_constraints(self):
        """Gets the attribute_constraints of this QPath.

        A list of attribute contraints applied to a query edge. If there are multiple items, they must all be true (equivalent to AND)  # noqa: E501

        :return: The attribute_constraints of this QPath.
        :rtype: List[AttributeConstraint]
        """
        return self._attribute_constraints

    @attribute_constraints.setter
    def attribute_constraints(self, attribute_constraints):
        """Sets the attribute_constraints of this QPath.

        A list of attribute contraints applied to a query edge. If there are multiple items, they must all be true (equivalent to AND)  # noqa: E501

        :param attribute_constraints: The attribute_constraints of this QPath.
        :type attribute_constraints: List[AttributeConstraint]
        """

        self._attribute_constraints = attribute_constraints

    @property
    def intermediate_nodes(self):
        """Gets the intermediate_nodes of this QPath.

        A list of QualifierConstraints that provide nuance to the QPath. If multiple QualifierConstraints are provided, there is an OR relationship between them. If the QPath has multiple predicates or if the QNodes that correspond to the subject or object of this QPath have multiple categories or multiple curies, then intermediate_nodes MUST NOT be specified because these complex use cases are not supported at this time.  # noqa: E501

        :return: The intermediate_nodes of this QPath.
        :rtype: List[QualifierConstraint]
        """
        return self._intermediate_nodes

    @intermediate_nodes.setter
    def intermediate_nodes(self, intermediate_nodes):
        """Sets the intermediate_nodes of this QPath.

        A list of QualifierConstraints that provide nuance to the QPath. If multiple QualifierConstraints are provided, there is an OR relationship between them. If the QPath has multiple predicates or if the QNodes that correspond to the subject or object of this QPath have multiple categories or multiple curies, then intermediate_nodes MUST NOT be specified because these complex use cases are not supported at this time.  # noqa: E501

        :param intermediate_nodes: The intermediate_nodes of this QPath.
        :type intermediate_nodes: List[QualifierConstraint]
        """

        self._intermediate_nodes = intermediate_nodes

