# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.base_query_graph import BaseQueryGraph
from openapi_server.models.pathfinder_query_graph_all_of import PathfinderQueryGraphAllOf
from openapi_server.models.q_node import QNode
from openapi_server.models.q_path import QPath
from openapi_server import util

from openapi_server.models.base_query_graph import BaseQueryGraph  # noqa: E501
from openapi_server.models.pathfinder_query_graph_all_of import PathfinderQueryGraphAllOf  # noqa: E501
from openapi_server.models.q_node import QNode  # noqa: E501
from openapi_server.models.q_path import QPath  # noqa: E501

class PathfinderQueryGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes=None, paths=None):  # noqa: E501
        """PathfinderQueryGraph - a model defined in OpenAPI

        :param nodes: The nodes of this PathfinderQueryGraph.  # noqa: E501
        :type nodes: Dict[str, QNode]
        :param paths: The paths of this PathfinderQueryGraph.  # noqa: E501
        :type paths: Dict[str, QPath]
        """
        self.openapi_types = {
            'nodes': Dict[str, QNode],
            'paths': Dict[str, QPath]
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'paths': 'paths'
        }

        self._nodes = nodes
        self._paths = paths

    @classmethod
    def from_dict(cls, dikt) -> 'PathfinderQueryGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PathfinderQueryGraph of this PathfinderQueryGraph.  # noqa: E501
        :rtype: PathfinderQueryGraph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this PathfinderQueryGraph.

        The node specifications. The keys of this map are unique node identifiers and the corresponding values include the constraints on bound nodes.  # noqa: E501

        :return: The nodes of this PathfinderQueryGraph.
        :rtype: Dict[str, QNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this PathfinderQueryGraph.

        The node specifications. The keys of this map are unique node identifiers and the corresponding values include the constraints on bound nodes.  # noqa: E501

        :param nodes: The nodes of this PathfinderQueryGraph.
        :type nodes: Dict[str, QNode]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def paths(self):
        """Gets the paths of this PathfinderQueryGraph.

        The QueryGraph path specification, used only for pathfinder type queries. The keys of this map are unique path identifiers and the corresponding values include the constraints on bound paths, in addition to specifying the subject, object, and intermediate QNodes.  # noqa: E501

        :return: The paths of this PathfinderQueryGraph.
        :rtype: Dict[str, QPath]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this PathfinderQueryGraph.

        The QueryGraph path specification, used only for pathfinder type queries. The keys of this map are unique path identifiers and the corresponding values include the constraints on bound paths, in addition to specifying the subject, object, and intermediate QNodes.  # noqa: E501

        :param paths: The paths of this PathfinderQueryGraph.
        :type paths: Dict[str, QPath]
        """
        if paths is None:
            raise ValueError("Invalid value for `paths`, must not be `None`")  # noqa: E501
        if paths is not None and len(paths) > 1:
            raise ValueError("Invalid value for `paths`, number of items must be less than or equal to `1`")  # noqa: E501
        if paths is not None and len(paths) < 1:
            raise ValueError("Invalid value for `paths`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._paths = paths
