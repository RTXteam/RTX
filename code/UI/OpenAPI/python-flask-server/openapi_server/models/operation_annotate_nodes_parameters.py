# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class OperationAnnotateNodesParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes=None):  # noqa: E501
        """OperationAnnotateNodesParameters - a model defined in OpenAPI

        :param attributes: The attributes of this OperationAnnotateNodesParameters.  # noqa: E501
        :type attributes: List[str]
        """
        self.openapi_types = {
            'attributes': List[str]
        }

        self.attribute_map = {
            'attributes': 'attributes'
        }

        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt) -> 'OperationAnnotateNodesParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationAnnotateNodes_parameters of this OperationAnnotateNodesParameters.  # noqa: E501
        :rtype: OperationAnnotateNodesParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this OperationAnnotateNodesParameters.

        A list of attributes to annotate the nodes with. If not included then all available data will be annotated.  # noqa: E501

        :return: The attributes of this OperationAnnotateNodesParameters.
        :rtype: List[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this OperationAnnotateNodesParameters.

        A list of attributes to annotate the nodes with. If not included then all available data will be annotated.  # noqa: E501

        :param attributes: The attributes of this OperationAnnotateNodesParameters.
        :type attributes: List[str]
        """

        self._attributes = attributes
