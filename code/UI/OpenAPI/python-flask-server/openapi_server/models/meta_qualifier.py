# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MetaQualifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, qualifier_type_id=None, applicable_values=None):  # noqa: E501
        """MetaQualifier - a model defined in OpenAPI

        :param qualifier_type_id: The qualifier_type_id of this MetaQualifier.  # noqa: E501
        :type qualifier_type_id: str
        :param applicable_values: The applicable_values of this MetaQualifier.  # noqa: E501
        :type applicable_values: List[str]
        """
        self.openapi_types = {
            'qualifier_type_id': str,
            'applicable_values': List[str]
        }

        self.attribute_map = {
            'qualifier_type_id': 'qualifier_type_id',
            'applicable_values': 'applicable_values'
        }

        self._qualifier_type_id = qualifier_type_id
        self._applicable_values = applicable_values

    @classmethod
    def from_dict(cls, dikt) -> 'MetaQualifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetaQualifier of this MetaQualifier.  # noqa: E501
        :rtype: MetaQualifier
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qualifier_type_id(self):
        """Gets the qualifier_type_id of this MetaQualifier.

        A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.  # noqa: E501

        :return: The qualifier_type_id of this MetaQualifier.
        :rtype: str
        """
        return self._qualifier_type_id

    @qualifier_type_id.setter
    def qualifier_type_id(self, qualifier_type_id):
        """Sets the qualifier_type_id of this MetaQualifier.

        A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.  # noqa: E501

        :param qualifier_type_id: The qualifier_type_id of this MetaQualifier.
        :type qualifier_type_id: str
        """
        if qualifier_type_id is None:
            raise ValueError("Invalid value for `qualifier_type_id`, must not be `None`")  # noqa: E501

        self._qualifier_type_id = qualifier_type_id

    @property
    def applicable_values(self):
        """Gets the applicable_values of this MetaQualifier.

        The list of values that are possible for this qualifier.  # noqa: E501

        :return: The applicable_values of this MetaQualifier.
        :rtype: List[str]
        """
        return self._applicable_values

    @applicable_values.setter
    def applicable_values(self, applicable_values):
        """Sets the applicable_values of this MetaQualifier.

        The list of values that are possible for this qualifier.  # noqa: E501

        :param applicable_values: The applicable_values of this MetaQualifier.
        :type applicable_values: List[str]
        """

        self._applicable_values = applicable_values
