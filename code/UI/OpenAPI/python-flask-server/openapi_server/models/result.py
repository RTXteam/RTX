# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.analysis import Analysis
from openapi_server.models.node_binding import NodeBinding
from openapi_server.models.any_type import AnyType
from openapi_server import util

from openapi_server.models.analysis import Analysis  # noqa: E501
from openapi_server.models.node_binding import NodeBinding  # noqa: E501
from openapi_server.models.any_type import AnyType  # noqa: E501

class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_bindings=None, analyses=None, id=None, description=None, essence=None, essence_category=None, row_data=None, score=None, score_name=None, score_direction=None, confidence=None, result_group=None, result_group_similarity_score=None, resource_id=None):  # noqa: E501
        """Result - a model defined in OpenAPI

        :param node_bindings: The node_bindings of this Result.  # noqa: E501
        :type node_bindings: Dict[str, List[NodeBinding]]
        :param analyses: The analyses of this Result.  # noqa: E501
        :type analyses: List[Analysis]
        :param id: The id of this Result.  # noqa: E501
        :type id: str
        :param description: The description of this Result.  # noqa: E501
        :type description: str
        :param essence: The essence of this Result.  # noqa: E501
        :type essence: str
        :param essence_category: The essence_category of this Result.  # noqa: E501
        :type essence_category: str
        :param row_data: The row_data of this Result.  # noqa: E501
        :type row_data: List[AnyType]
        :param score: The score of this Result.  # noqa: E501
        :type score: float
        :param score_name: The score_name of this Result.  # noqa: E501
        :type score_name: str
        :param score_direction: The score_direction of this Result.  # noqa: E501
        :type score_direction: str
        :param confidence: The confidence of this Result.  # noqa: E501
        :type confidence: float
        :param result_group: The result_group of this Result.  # noqa: E501
        :type result_group: int
        :param result_group_similarity_score: The result_group_similarity_score of this Result.  # noqa: E501
        :type result_group_similarity_score: float
        :param resource_id: The resource_id of this Result.  # noqa: E501
        :type resource_id: str
        """
        self.openapi_types = {
            'node_bindings': Dict[str, List[NodeBinding]],
            'analyses': List[Analysis],
            'id': str,
            'description': str,
            'essence': str,
            'essence_category': str,
            'row_data': List[AnyType],
            'score': float,
            'score_name': str,
            'score_direction': str,
            'confidence': float,
            'result_group': int,
            'result_group_similarity_score': float,
            'resource_id': str
        }

        self.attribute_map = {
            'node_bindings': 'node_bindings',
            'analyses': 'analyses',
            'id': 'id',
            'description': 'description',
            'essence': 'essence',
            'essence_category': 'essence_category',
            'row_data': 'row_data',
            'score': 'score',
            'score_name': 'score_name',
            'score_direction': 'score_direction',
            'confidence': 'confidence',
            'result_group': 'result_group',
            'result_group_similarity_score': 'result_group_similarity_score',
            'resource_id': 'resource_id'
        }

        self._node_bindings = node_bindings
        self._analyses = analyses
        self._id = id
        self._description = description
        self._essence = essence
        self._essence_category = essence_category
        self._row_data = row_data
        self._score = score
        self._score_name = score_name
        self._score_direction = score_direction
        self._confidence = confidence
        self._result_group = result_group
        self._result_group_similarity_score = result_group_similarity_score
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.  # noqa: E501
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_bindings(self):
        """Gets the node_bindings of this Result.

        The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.  # noqa: E501

        :return: The node_bindings of this Result.
        :rtype: Dict[str, List[NodeBinding]]
        """
        return self._node_bindings

    @node_bindings.setter
    def node_bindings(self, node_bindings):
        """Sets the node_bindings of this Result.

        The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.  # noqa: E501

        :param node_bindings: The node_bindings of this Result.
        :type node_bindings: Dict[str, List[NodeBinding]]
        """
        if node_bindings is None:
            raise ValueError("Invalid value for `node_bindings`, must not be `None`")  # noqa: E501

        self._node_bindings = node_bindings

    @property
    def analyses(self):
        """Gets the analyses of this Result.

        The list of all Analysis components that contribute to the result. See below for Analysis components.  # noqa: E501

        :return: The analyses of this Result.
        :rtype: List[Analysis]
        """
        return self._analyses

    @analyses.setter
    def analyses(self, analyses):
        """Sets the analyses of this Result.

        The list of all Analysis components that contribute to the result. See below for Analysis components.  # noqa: E501

        :param analyses: The analyses of this Result.
        :type analyses: List[Analysis]
        """
        if analyses is None:
            raise ValueError("Invalid value for `analyses`, must not be `None`")  # noqa: E501

        self._analyses = analyses

    @property
    def id(self):
        """Gets the id of this Result.

        URI for this result  # noqa: E501

        :return: The id of this Result.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Result.

        URI for this result  # noqa: E501

        :param id: The id of this Result.
        :type id: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Result.

        A free text description of this result answer from the resource  # noqa: E501

        :return: The description of this Result.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Result.

        A free text description of this result answer from the resource  # noqa: E501

        :param description: The description of this Result.
        :type description: str
        """

        self._description = description

    @property
    def essence(self):
        """Gets the essence of this Result.

        A single string that is the terse essence of the result (useful for simple answers)  # noqa: E501

        :return: The essence of this Result.
        :rtype: str
        """
        return self._essence

    @essence.setter
    def essence(self, essence):
        """Sets the essence of this Result.

        A single string that is the terse essence of the result (useful for simple answers)  # noqa: E501

        :param essence: The essence of this Result.
        :type essence: str
        """

        self._essence = essence

    @property
    def essence_category(self):
        """Gets the essence_category of this Result.

        A Translator BioLink bioentity category of the essence  # noqa: E501

        :return: The essence_category of this Result.
        :rtype: str
        """
        return self._essence_category

    @essence_category.setter
    def essence_category(self, essence_category):
        """Sets the essence_category of this Result.

        A Translator BioLink bioentity category of the essence  # noqa: E501

        :param essence_category: The essence_category of this Result.
        :type essence_category: str
        """

        self._essence_category = essence_category

    @property
    def row_data(self):
        """Gets the row_data of this Result.

        An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants simplified tabular output  # noqa: E501

        :return: The row_data of this Result.
        :rtype: List[AnyType]
        """
        return self._row_data

    @row_data.setter
    def row_data(self, row_data):
        """Sets the row_data of this Result.

        An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants simplified tabular output  # noqa: E501

        :param row_data: The row_data of this Result.
        :type row_data: List[AnyType]
        """

        self._row_data = row_data

    @property
    def score(self):
        """Gets the score of this Result.

        A numerical score associated with this result indicating the relevance or confidence of this result relative to others in the returned set. Higher MUST be better.  # noqa: E501

        :return: The score of this Result.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Result.

        A numerical score associated with this result indicating the relevance or confidence of this result relative to others in the returned set. Higher MUST be better.  # noqa: E501

        :param score: The score of this Result.
        :type score: float
        """

        self._score = score

    @property
    def score_name(self):
        """Gets the score_name of this Result.

        Name for the score  # noqa: E501

        :return: The score_name of this Result.
        :rtype: str
        """
        return self._score_name

    @score_name.setter
    def score_name(self, score_name):
        """Sets the score_name of this Result.

        Name for the score  # noqa: E501

        :param score_name: The score_name of this Result.
        :type score_name: str
        """

        self._score_name = score_name

    @property
    def score_direction(self):
        """Gets the score_direction of this Result.

        Sorting indicator for the score: one of higher_is_better or lower_is_better  # noqa: E501

        :return: The score_direction of this Result.
        :rtype: str
        """
        return self._score_direction

    @score_direction.setter
    def score_direction(self, score_direction):
        """Sets the score_direction of this Result.

        Sorting indicator for the score: one of higher_is_better or lower_is_better  # noqa: E501

        :param score_direction: The score_direction of this Result.
        :type score_direction: str
        """

        self._score_direction = score_direction

    @property
    def confidence(self):
        """Gets the confidence of this Result.

        Confidence metric for this result, a value between (inclusive)  0.0 (no confidence) and 1.0 (highest confidence)  # noqa: E501

        :return: The confidence of this Result.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Result.

        Confidence metric for this result, a value between (inclusive)  0.0 (no confidence) and 1.0 (highest confidence)  # noqa: E501

        :param confidence: The confidence of this Result.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def result_group(self):
        """Gets the result_group of this Result.

        An integer group number for results for use in cases where several results should be grouped together. Also useful to control sorting ascending.  # noqa: E501

        :return: The result_group of this Result.
        :rtype: int
        """
        return self._result_group

    @result_group.setter
    def result_group(self, result_group):
        """Sets the result_group of this Result.

        An integer group number for results for use in cases where several results should be grouped together. Also useful to control sorting ascending.  # noqa: E501

        :param result_group: The result_group of this Result.
        :type result_group: int
        """

        self._result_group = result_group

    @property
    def result_group_similarity_score(self):
        """Gets the result_group_similarity_score of this Result.

        A score that denotes the similarity of this result to other members of the result_group  # noqa: E501

        :return: The result_group_similarity_score of this Result.
        :rtype: float
        """
        return self._result_group_similarity_score

    @result_group_similarity_score.setter
    def result_group_similarity_score(self, result_group_similarity_score):
        """Sets the result_group_similarity_score of this Result.

        A score that denotes the similarity of this result to other members of the result_group  # noqa: E501

        :param result_group_similarity_score: The result_group_similarity_score of this Result.
        :type result_group_similarity_score: float
        """

        self._result_group_similarity_score = result_group_similarity_score

    @property
    def resource_id(self):
        """Gets the resource_id of this Result.

        Identifier string of the resource that provided this result (e.g., ARAX, Robokop, etc.)  # noqa: E501

        :return: The resource_id of this Result.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Result.

        Identifier string of the resource that provided this result (e.g., ARAX, Robokop, etc.)  # noqa: E501

        :param resource_id: The resource_id of this Result.
        :type resource_id: str
        """

        self._resource_id = resource_id
