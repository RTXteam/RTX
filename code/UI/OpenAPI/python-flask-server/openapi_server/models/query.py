# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.log_level import LogLevel
from openapi_server.models.message import Message
from openapi_server.models.any_type import AnyType
from openapi_server.models.operations import Operations
from openapi_server import util

from openapi_server.models.log_level import LogLevel  # noqa: E501
from openapi_server.models.message import Message  # noqa: E501
from openapi_server.models.any_type import AnyType  # noqa: E501
from openapi_server.models.operations import Operations  # noqa: E501

class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, log_level=None, workflow=None, submitter=None, bypass_cache=False, stream_progress=False, enforce_edge_directionality=False, return_minimal_metadata=False, max_results=100, page_size=100, page_number=1, operations=None):  # noqa: E501
        """Query - a model defined in OpenAPI

        :param message: The message of this Query.  # noqa: E501
        :type message: Message
        :param log_level: The log_level of this Query.  # noqa: E501
        :type log_level: LogLevel
        :param workflow: The workflow of this Query.  # noqa: E501
        :type workflow: List[AnyType]
        :param submitter: The submitter of this Query.  # noqa: E501
        :type submitter: str
        :param bypass_cache: The bypass_cache of this Query.  # noqa: E501
        :type bypass_cache: bool
        :param stream_progress: The stream_progress of this Query.  # noqa: E501
        :type stream_progress: bool
        :param enforce_edge_directionality: The enforce_edge_directionality of this Query.  # noqa: E501
        :type enforce_edge_directionality: bool
        :param return_minimal_metadata: The return_minimal_metadata of this Query.  # noqa: E501
        :type return_minimal_metadata: bool
        :param max_results: The max_results of this Query.  # noqa: E501
        :type max_results: int
        :param page_size: The page_size of this Query.  # noqa: E501
        :type page_size: int
        :param page_number: The page_number of this Query.  # noqa: E501
        :type page_number: int
        :param operations: The operations of this Query.  # noqa: E501
        :type operations: Operations
        """
        self.openapi_types = {
            'message': Message,
            'log_level': LogLevel,
            'workflow': List[AnyType],
            'submitter': str,
            'bypass_cache': bool,
            'stream_progress': bool,
            'enforce_edge_directionality': bool,
            'return_minimal_metadata': bool,
            'max_results': int,
            'page_size': int,
            'page_number': int,
            'operations': Operations
        }

        self.attribute_map = {
            'message': 'message',
            'log_level': 'log_level',
            'workflow': 'workflow',
            'submitter': 'submitter',
            'bypass_cache': 'bypass_cache',
            'stream_progress': 'stream_progress',
            'enforce_edge_directionality': 'enforce_edge_directionality',
            'return_minimal_metadata': 'return_minimal_metadata',
            'max_results': 'max_results',
            'page_size': 'page_size',
            'page_number': 'page_number',
            'operations': 'operations'
        }

        self._message = message
        self._log_level = log_level
        self._workflow = workflow
        self._submitter = submitter
        self._bypass_cache = bypass_cache
        self._stream_progress = stream_progress
        self._enforce_edge_directionality = enforce_edge_directionality
        self._return_minimal_metadata = return_minimal_metadata
        self._max_results = max_results
        self._page_size = page_size
        self._page_number = page_number
        self._operations = operations

    @classmethod
    def from_dict(cls, dikt) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Query of this Query.  # noqa: E501
        :rtype: Query
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Query.


        :return: The message of this Query.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Query.


        :param message: The message of this Query.
        :type message: Message
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def log_level(self):
        """Gets the log_level of this Query.

        The least critical level of logs to return  # noqa: E501

        :return: The log_level of this Query.
        :rtype: LogLevel
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this Query.

        The least critical level of logs to return  # noqa: E501

        :param log_level: The log_level of this Query.
        :type log_level: LogLevel
        """

        self._log_level = log_level

    @property
    def workflow(self):
        """Gets the workflow of this Query.

        List of workflow steps to be executed.  # noqa: E501

        :return: The workflow of this Query.
        :rtype: List[AnyType]
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this Query.

        List of workflow steps to be executed.  # noqa: E501

        :param workflow: The workflow of this Query.
        :type workflow: List[AnyType]
        """

        self._workflow = workflow

    @property
    def submitter(self):
        """Gets the submitter of this Query.

        Any string for self-identifying the submitter of a query. The purpose of this optional field is to aid in the tracking of the source of queries for development and issue resolution.  # noqa: E501

        :return: The submitter of this Query.
        :rtype: str
        """
        return self._submitter

    @submitter.setter
    def submitter(self, submitter):
        """Sets the submitter of this Query.

        Any string for self-identifying the submitter of a query. The purpose of this optional field is to aid in the tracking of the source of queries for development and issue resolution.  # noqa: E501

        :param submitter: The submitter of this Query.
        :type submitter: str
        """

        self._submitter = submitter

    @property
    def bypass_cache(self):
        """Gets the bypass_cache of this Query.

        Set to true in order to bypass any possible cached response and try to answer the query from scratch  # noqa: E501

        :return: The bypass_cache of this Query.
        :rtype: bool
        """
        return self._bypass_cache

    @bypass_cache.setter
    def bypass_cache(self, bypass_cache):
        """Sets the bypass_cache of this Query.

        Set to true in order to bypass any possible cached response and try to answer the query from scratch  # noqa: E501

        :param bypass_cache: The bypass_cache of this Query.
        :type bypass_cache: bool
        """

        self._bypass_cache = bypass_cache

    @property
    def stream_progress(self):
        """Gets the stream_progress of this Query.

        Set to true in order to receive a stream of LogEntry objects as the query is progressing  # noqa: E501

        :return: The stream_progress of this Query.
        :rtype: bool
        """
        return self._stream_progress

    @stream_progress.setter
    def stream_progress(self, stream_progress):
        """Sets the stream_progress of this Query.

        Set to true in order to receive a stream of LogEntry objects as the query is progressing  # noqa: E501

        :param stream_progress: The stream_progress of this Query.
        :type stream_progress: bool
        """

        self._stream_progress = stream_progress

    @property
    def enforce_edge_directionality(self):
        """Gets the enforce_edge_directionality of this Query.

        Set to true in order to enforce edge directionality during queries. By default, edge directionality can be reversed without penalty.  # noqa: E501

        :return: The enforce_edge_directionality of this Query.
        :rtype: bool
        """
        return self._enforce_edge_directionality

    @enforce_edge_directionality.setter
    def enforce_edge_directionality(self, enforce_edge_directionality):
        """Sets the enforce_edge_directionality of this Query.

        Set to true in order to enforce edge directionality during queries. By default, edge directionality can be reversed without penalty.  # noqa: E501

        :param enforce_edge_directionality: The enforce_edge_directionality of this Query.
        :type enforce_edge_directionality: bool
        """

        self._enforce_edge_directionality = enforce_edge_directionality

    @property
    def return_minimal_metadata(self):
        """Gets the return_minimal_metadata of this Query.

        Set to true in order to return only the most minimal metadata. By default, rich metadata for nodes and edges are supplied, which may cause a very large and slower Response.  # noqa: E501

        :return: The return_minimal_metadata of this Query.
        :rtype: bool
        """
        return self._return_minimal_metadata

    @return_minimal_metadata.setter
    def return_minimal_metadata(self, return_minimal_metadata):
        """Sets the return_minimal_metadata of this Query.

        Set to true in order to return only the most minimal metadata. By default, rich metadata for nodes and edges are supplied, which may cause a very large and slower Response.  # noqa: E501

        :param return_minimal_metadata: The return_minimal_metadata of this Query.
        :type return_minimal_metadata: bool
        """

        self._return_minimal_metadata = return_minimal_metadata

    @property
    def max_results(self):
        """Gets the max_results of this Query.

        Maximum number of individual results to return  # noqa: E501

        :return: The max_results of this Query.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this Query.

        Maximum number of individual results to return  # noqa: E501

        :param max_results: The max_results of this Query.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def page_size(self):
        """Gets the page_size of this Query.

        Split the results into pages with this number of results each  # noqa: E501

        :return: The page_size of this Query.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Query.

        Split the results into pages with this number of results each  # noqa: E501

        :param page_size: The page_size of this Query.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_number(self):
        """Gets the page_number of this Query.

        Page number of results when the number of results exceeds the page_size, with page 1 as the first page  # noqa: E501

        :return: The page_number of this Query.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this Query.

        Page number of results when the number of results exceeds the page_size, with page 1 as the first page  # noqa: E501

        :param page_number: The page_number of this Query.
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def operations(self):
        """Gets the operations of this Query.

        Container for one or more Message objects or identifiers for one or more Messages along with a processing plan and options for how those messages should be processed and returned  # noqa: E501

        :return: The operations of this Query.
        :rtype: Operations
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Query.

        Container for one or more Message objects or identifiers for one or more Messages along with a processing plan and options for how those messages should be processed and returned  # noqa: E501

        :param operations: The operations of this Query.
        :type operations: Operations
        """

        self._operations = operations
