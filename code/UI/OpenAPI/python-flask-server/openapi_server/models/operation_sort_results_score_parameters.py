# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class OperationSortResultsScoreParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ascending_or_descending=None):  # noqa: E501
        """OperationSortResultsScoreParameters - a model defined in OpenAPI

        :param ascending_or_descending: The ascending_or_descending of this OperationSortResultsScoreParameters.  # noqa: E501
        :type ascending_or_descending: str
        """
        self.openapi_types = {
            'ascending_or_descending': str
        }

        self.attribute_map = {
            'ascending_or_descending': 'ascending_or_descending'
        }

        self._ascending_or_descending = ascending_or_descending

    @classmethod
    def from_dict(cls, dikt) -> 'OperationSortResultsScoreParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationSortResultsScore_parameters of this OperationSortResultsScoreParameters.  # noqa: E501
        :rtype: OperationSortResultsScoreParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ascending_or_descending(self):
        """Gets the ascending_or_descending of this OperationSortResultsScoreParameters.

        Indicates whether results should be sorted in ascending or descending order.  # noqa: E501

        :return: The ascending_or_descending of this OperationSortResultsScoreParameters.
        :rtype: str
        """
        return self._ascending_or_descending

    @ascending_or_descending.setter
    def ascending_or_descending(self, ascending_or_descending):
        """Sets the ascending_or_descending of this OperationSortResultsScoreParameters.

        Indicates whether results should be sorted in ascending or descending order.  # noqa: E501

        :param ascending_or_descending: The ascending_or_descending of this OperationSortResultsScoreParameters.
        :type ascending_or_descending: str
        """
        allowed_values = ["ascending", "descending"]  # noqa: E501
        if ascending_or_descending not in allowed_values:
            raise ValueError(
                "Invalid value for `ascending_or_descending` ({0}), must be one of {1}"
                .format(ascending_or_descending, allowed_values)
            )

        self._ascending_or_descending = ascending_or_descending
