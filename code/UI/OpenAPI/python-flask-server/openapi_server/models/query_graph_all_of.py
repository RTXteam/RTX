# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.q_edge import QEdge
from openapi_server import util

from openapi_server.models.q_edge import QEdge  # noqa: E501

class QueryGraphAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edges=None):  # noqa: E501
        """QueryGraphAllOf - a model defined in OpenAPI

        :param edges: The edges of this QueryGraphAllOf.  # noqa: E501
        :type edges: Dict[str, QEdge]
        """
        self.openapi_types = {
            'edges': Dict[str, QEdge]
        }

        self.attribute_map = {
            'edges': 'edges'
        }

        self._edges = edges

    @classmethod
    def from_dict(cls, dikt) -> 'QueryGraphAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryGraph_allOf of this QueryGraphAllOf.  # noqa: E501
        :rtype: QueryGraphAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edges(self):
        """Gets the edges of this QueryGraphAllOf.

        The edge specifications. The keys of this map are unique edge identifiers and the corresponding values include the constraints on bound edges, in addition to specifying the subject and object QNodes.  # noqa: E501

        :return: The edges of this QueryGraphAllOf.
        :rtype: Dict[str, QEdge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this QueryGraphAllOf.

        The edge specifications. The keys of this map are unique edge identifiers and the corresponding values include the constraints on bound edges, in addition to specifying the subject and object QNodes.  # noqa: E501

        :param edges: The edges of this QueryGraphAllOf.
        :type edges: Dict[str, QEdge]
        """
        if edges is None:
            raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501

        self._edges = edges
