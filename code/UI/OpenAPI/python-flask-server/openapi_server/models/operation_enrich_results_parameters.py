# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class OperationEnrichResultsParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pvalue_threshold=0.0000010, qnode_keys=None):  # noqa: E501
        """OperationEnrichResultsParameters - a model defined in OpenAPI

        :param pvalue_threshold: The pvalue_threshold of this OperationEnrichResultsParameters.  # noqa: E501
        :type pvalue_threshold: float
        :param qnode_keys: The qnode_keys of this OperationEnrichResultsParameters.  # noqa: E501
        :type qnode_keys: List[str]
        """
        self.openapi_types = {
            'pvalue_threshold': float,
            'qnode_keys': List[str]
        }

        self.attribute_map = {
            'pvalue_threshold': 'pvalue_threshold',
            'qnode_keys': 'qnode_keys'
        }

        self._pvalue_threshold = pvalue_threshold
        self._qnode_keys = qnode_keys

    @classmethod
    def from_dict(cls, dikt) -> 'OperationEnrichResultsParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationEnrichResults_parameters of this OperationEnrichResultsParameters.  # noqa: E501
        :rtype: OperationEnrichResultsParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pvalue_threshold(self):
        """Gets the pvalue_threshold of this OperationEnrichResultsParameters.

        The cutoff p-value for enrichment.  # noqa: E501

        :return: The pvalue_threshold of this OperationEnrichResultsParameters.
        :rtype: float
        """
        return self._pvalue_threshold

    @pvalue_threshold.setter
    def pvalue_threshold(self, pvalue_threshold):
        """Sets the pvalue_threshold of this OperationEnrichResultsParameters.

        The cutoff p-value for enrichment.  # noqa: E501

        :param pvalue_threshold: The pvalue_threshold of this OperationEnrichResultsParameters.
        :type pvalue_threshold: float
        """
        if pvalue_threshold is not None and pvalue_threshold > 1:  # noqa: E501
            raise ValueError("Invalid value for `pvalue_threshold`, must be a value less than or equal to `1`")  # noqa: E501
        if pvalue_threshold is not None and pvalue_threshold < 0:  # noqa: E501
            raise ValueError("Invalid value for `pvalue_threshold`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pvalue_threshold = pvalue_threshold

    @property
    def qnode_keys(self):
        """Gets the qnode_keys of this OperationEnrichResultsParameters.

        If specified, then only knodes bound to these qnodes will be examined for enrichment and combination.  # noqa: E501

        :return: The qnode_keys of this OperationEnrichResultsParameters.
        :rtype: List[str]
        """
        return self._qnode_keys

    @qnode_keys.setter
    def qnode_keys(self, qnode_keys):
        """Sets the qnode_keys of this OperationEnrichResultsParameters.

        If specified, then only knodes bound to these qnodes will be examined for enrichment and combination.  # noqa: E501

        :param qnode_keys: The qnode_keys of this OperationEnrichResultsParameters.
        :type qnode_keys: List[str]
        """

        self._qnode_keys = qnode_keys
