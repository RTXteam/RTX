# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.attribute import Attribute
from openapi_server import util

from openapi_server.models.attribute import Attribute  # noqa: E501

class AuxiliaryGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edges=None, attributes=None):  # noqa: E501
        """AuxiliaryGraph - a model defined in OpenAPI

        :param edges: The edges of this AuxiliaryGraph.  # noqa: E501
        :type edges: List[str]
        :param attributes: The attributes of this AuxiliaryGraph.  # noqa: E501
        :type attributes: List[Attribute]
        """
        self.openapi_types = {
            'edges': List[str],
            'attributes': List[Attribute]
        }

        self.attribute_map = {
            'edges': 'edges',
            'attributes': 'attributes'
        }

        self._edges = edges
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt) -> 'AuxiliaryGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuxiliaryGraph of this AuxiliaryGraph.  # noqa: E501
        :rtype: AuxiliaryGraph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edges(self):
        """Gets the edges of this AuxiliaryGraph.

        List of edges that form the Auxiliary Graph. Each item is a reference to a single Knowledge Graph edge  # noqa: E501

        :return: The edges of this AuxiliaryGraph.
        :rtype: List[str]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this AuxiliaryGraph.

        List of edges that form the Auxiliary Graph. Each item is a reference to a single Knowledge Graph edge  # noqa: E501

        :param edges: The edges of this AuxiliaryGraph.
        :type edges: List[str]
        """
        if edges is None:
            raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501
        if edges is not None and len(edges) < 1:
            raise ValueError("Invalid value for `edges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._edges = edges

    @property
    def attributes(self):
        """Gets the attributes of this AuxiliaryGraph.

        Attributes of the Auxiliary Graph  # noqa: E501

        :return: The attributes of this AuxiliaryGraph.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AuxiliaryGraph.

        Attributes of the Auxiliary Graph  # noqa: E501

        :param attributes: The attributes of this AuxiliaryGraph.
        :type attributes: List[Attribute]
        """

        self._attributes = attributes
