# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.attribute import Attribute
from openapi_server import util

from openapi_server.models.attribute import Attribute  # noqa: E501

class BaseAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id=None, score=None, support_graphs=None, scoring_method=None, attributes=None):  # noqa: E501
        """BaseAnalysis - a model defined in OpenAPI

        :param resource_id: The resource_id of this BaseAnalysis.  # noqa: E501
        :type resource_id: str
        :param score: The score of this BaseAnalysis.  # noqa: E501
        :type score: float
        :param support_graphs: The support_graphs of this BaseAnalysis.  # noqa: E501
        :type support_graphs: List[str]
        :param scoring_method: The scoring_method of this BaseAnalysis.  # noqa: E501
        :type scoring_method: str
        :param attributes: The attributes of this BaseAnalysis.  # noqa: E501
        :type attributes: List[Attribute]
        """
        self.openapi_types = {
            'resource_id': str,
            'score': float,
            'support_graphs': List[str],
            'scoring_method': str,
            'attributes': List[Attribute]
        }

        self.attribute_map = {
            'resource_id': 'resource_id',
            'score': 'score',
            'support_graphs': 'support_graphs',
            'scoring_method': 'scoring_method',
            'attributes': 'attributes'
        }

        self._resource_id = resource_id
        self._score = score
        self._support_graphs = support_graphs
        self._scoring_method = scoring_method
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt) -> 'BaseAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseAnalysis of this BaseAnalysis.  # noqa: E501
        :rtype: BaseAnalysis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self):
        """Gets the resource_id of this BaseAnalysis.

        A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.  # noqa: E501

        :return: The resource_id of this BaseAnalysis.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this BaseAnalysis.

        A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.  # noqa: E501

        :param resource_id: The resource_id of this BaseAnalysis.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def score(self):
        """Gets the score of this BaseAnalysis.

        A numerical score associated with this result indicating the relevance or confidence of this result relative to others in the returned set. Higher MUST be better.  # noqa: E501

        :return: The score of this BaseAnalysis.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this BaseAnalysis.

        A numerical score associated with this result indicating the relevance or confidence of this result relative to others in the returned set. Higher MUST be better.  # noqa: E501

        :param score: The score of this BaseAnalysis.
        :type score: float
        """

        self._score = score

    @property
    def support_graphs(self):
        """Gets the support_graphs of this BaseAnalysis.

        This is a list of references to Auxiliary Graph instances that supported the analysis of a Result as performed by the reasoning service. Each item in the list is the key of a single Auxiliary Graph.  # noqa: E501

        :return: The support_graphs of this BaseAnalysis.
        :rtype: List[str]
        """
        return self._support_graphs

    @support_graphs.setter
    def support_graphs(self, support_graphs):
        """Sets the support_graphs of this BaseAnalysis.

        This is a list of references to Auxiliary Graph instances that supported the analysis of a Result as performed by the reasoning service. Each item in the list is the key of a single Auxiliary Graph.  # noqa: E501

        :param support_graphs: The support_graphs of this BaseAnalysis.
        :type support_graphs: List[str]
        """

        self._support_graphs = support_graphs

    @property
    def scoring_method(self):
        """Gets the scoring_method of this BaseAnalysis.

        An identifier and link to an explanation for the method used to generate the score  # noqa: E501

        :return: The scoring_method of this BaseAnalysis.
        :rtype: str
        """
        return self._scoring_method

    @scoring_method.setter
    def scoring_method(self, scoring_method):
        """Sets the scoring_method of this BaseAnalysis.

        An identifier and link to an explanation for the method used to generate the score  # noqa: E501

        :param scoring_method: The scoring_method of this BaseAnalysis.
        :type scoring_method: str
        """

        self._scoring_method = scoring_method

    @property
    def attributes(self):
        """Gets the attributes of this BaseAnalysis.

        The attributes of this particular Analysis.  # noqa: E501

        :return: The attributes of this BaseAnalysis.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this BaseAnalysis.

        The attributes of this particular Analysis.  # noqa: E501

        :param attributes: The attributes of this BaseAnalysis.
        :type attributes: List[Attribute]
        """

        self._attributes = attributes
