# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class OperationFilterKgraphTopNParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edge_attribute=None, keep_top_or_bottom='top', max_edges=50, qedge_keys=None, qnode_keys=[]):  # noqa: E501
        """OperationFilterKgraphTopNParameters - a model defined in OpenAPI

        :param edge_attribute: The edge_attribute of this OperationFilterKgraphTopNParameters.  # noqa: E501
        :type edge_attribute: str
        :param keep_top_or_bottom: The keep_top_or_bottom of this OperationFilterKgraphTopNParameters.  # noqa: E501
        :type keep_top_or_bottom: str
        :param max_edges: The max_edges of this OperationFilterKgraphTopNParameters.  # noqa: E501
        :type max_edges: int
        :param qedge_keys: The qedge_keys of this OperationFilterKgraphTopNParameters.  # noqa: E501
        :type qedge_keys: List[str]
        :param qnode_keys: The qnode_keys of this OperationFilterKgraphTopNParameters.  # noqa: E501
        :type qnode_keys: List[str]
        """
        self.openapi_types = {
            'edge_attribute': str,
            'keep_top_or_bottom': str,
            'max_edges': int,
            'qedge_keys': List[str],
            'qnode_keys': List[str]
        }

        self.attribute_map = {
            'edge_attribute': 'edge_attribute',
            'keep_top_or_bottom': 'keep_top_or_bottom',
            'max_edges': 'max_edges',
            'qedge_keys': 'qedge_keys',
            'qnode_keys': 'qnode_keys'
        }

        self._edge_attribute = edge_attribute
        self._keep_top_or_bottom = keep_top_or_bottom
        self._max_edges = max_edges
        self._qedge_keys = qedge_keys
        self._qnode_keys = qnode_keys

    @classmethod
    def from_dict(cls, dikt) -> 'OperationFilterKgraphTopNParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationFilterKgraphTopN_parameters of this OperationFilterKgraphTopNParameters.  # noqa: E501
        :rtype: OperationFilterKgraphTopNParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edge_attribute(self):
        """Gets the edge_attribute of this OperationFilterKgraphTopNParameters.

        The name of the edge attribute to filter on.  # noqa: E501

        :return: The edge_attribute of this OperationFilterKgraphTopNParameters.
        :rtype: str
        """
        return self._edge_attribute

    @edge_attribute.setter
    def edge_attribute(self, edge_attribute):
        """Sets the edge_attribute of this OperationFilterKgraphTopNParameters.

        The name of the edge attribute to filter on.  # noqa: E501

        :param edge_attribute: The edge_attribute of this OperationFilterKgraphTopNParameters.
        :type edge_attribute: str
        """
        if edge_attribute is None:
            raise ValueError("Invalid value for `edge_attribute`, must not be `None`")  # noqa: E501

        self._edge_attribute = edge_attribute

    @property
    def keep_top_or_bottom(self):
        """Gets the keep_top_or_bottom of this OperationFilterKgraphTopNParameters.

        Indicate whether or not the the top or bottom n values should be kept.  # noqa: E501

        :return: The keep_top_or_bottom of this OperationFilterKgraphTopNParameters.
        :rtype: str
        """
        return self._keep_top_or_bottom

    @keep_top_or_bottom.setter
    def keep_top_or_bottom(self, keep_top_or_bottom):
        """Sets the keep_top_or_bottom of this OperationFilterKgraphTopNParameters.

        Indicate whether or not the the top or bottom n values should be kept.  # noqa: E501

        :param keep_top_or_bottom: The keep_top_or_bottom of this OperationFilterKgraphTopNParameters.
        :type keep_top_or_bottom: str
        """
        allowed_values = ["top", "bottom"]  # noqa: E501
        if keep_top_or_bottom not in allowed_values:
            raise ValueError(
                "Invalid value for `keep_top_or_bottom` ({0}), must be one of {1}"
                .format(keep_top_or_bottom, allowed_values)
            )

        self._keep_top_or_bottom = keep_top_or_bottom

    @property
    def max_edges(self):
        """Gets the max_edges of this OperationFilterKgraphTopNParameters.

        The number of edges to keep.  # noqa: E501

        :return: The max_edges of this OperationFilterKgraphTopNParameters.
        :rtype: int
        """
        return self._max_edges

    @max_edges.setter
    def max_edges(self, max_edges):
        """Sets the max_edges of this OperationFilterKgraphTopNParameters.

        The number of edges to keep.  # noqa: E501

        :param max_edges: The max_edges of this OperationFilterKgraphTopNParameters.
        :type max_edges: int
        """
        if max_edges is not None and max_edges < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_edges`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_edges = max_edges

    @property
    def qedge_keys(self):
        """Gets the qedge_keys of this OperationFilterKgraphTopNParameters.

        This indicates if you only want to filter on specific edge_keys. If not provided or empty, all edges will be filtered on.  # noqa: E501

        :return: The qedge_keys of this OperationFilterKgraphTopNParameters.
        :rtype: List[str]
        """
        return self._qedge_keys

    @qedge_keys.setter
    def qedge_keys(self, qedge_keys):
        """Sets the qedge_keys of this OperationFilterKgraphTopNParameters.

        This indicates if you only want to filter on specific edge_keys. If not provided or empty, all edges will be filtered on.  # noqa: E501

        :param qedge_keys: The qedge_keys of this OperationFilterKgraphTopNParameters.
        :type qedge_keys: List[str]
        """

        self._qedge_keys = qedge_keys

    @property
    def qnode_keys(self):
        """Gets the qnode_keys of this OperationFilterKgraphTopNParameters.

        This indicates if you only want nodes corresponding to a specific list of qnode_keys to be removed. If not provided or empty, no nodes will be removed when filtering. Allows us to know what to do with the nodes connected to edges that are removed.  # noqa: E501

        :return: The qnode_keys of this OperationFilterKgraphTopNParameters.
        :rtype: List[str]
        """
        return self._qnode_keys

    @qnode_keys.setter
    def qnode_keys(self, qnode_keys):
        """Sets the qnode_keys of this OperationFilterKgraphTopNParameters.

        This indicates if you only want nodes corresponding to a specific list of qnode_keys to be removed. If not provided or empty, no nodes will be removed when filtering. Allows us to know what to do with the nodes connected to edges that are removed.  # noqa: E501

        :param qnode_keys: The qnode_keys of this OperationFilterKgraphTopNParameters.
        :type qnode_keys: List[str]
        """

        self._qnode_keys = qnode_keys
