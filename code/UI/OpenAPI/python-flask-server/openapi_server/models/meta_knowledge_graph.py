# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.meta_edge import MetaEdge
from openapi_server.models.meta_node import MetaNode
from openapi_server import util

from openapi_server.models.meta_edge import MetaEdge  # noqa: E501
from openapi_server.models.meta_node import MetaNode  # noqa: E501

class MetaKnowledgeGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes=None, edges=None):  # noqa: E501
        """MetaKnowledgeGraph - a model defined in OpenAPI

        :param nodes: The nodes of this MetaKnowledgeGraph.  # noqa: E501
        :type nodes: Dict[str, MetaNode]
        :param edges: The edges of this MetaKnowledgeGraph.  # noqa: E501
        :type edges: List[MetaEdge]
        """
        self.openapi_types = {
            'nodes': Dict[str, MetaNode],
            'edges': List[MetaEdge]
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'edges': 'edges'
        }

        self._nodes = nodes
        self._edges = edges

    @classmethod
    def from_dict(cls, dikt) -> 'MetaKnowledgeGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetaKnowledgeGraph of this MetaKnowledgeGraph.  # noqa: E501
        :rtype: MetaKnowledgeGraph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this MetaKnowledgeGraph.

        Collection of the most specific node categories provided by this TRAPI web service, indexed by Biolink class CURIEs. A node category is only exposed here if there is node for which that is the most specific category available.  # noqa: E501

        :return: The nodes of this MetaKnowledgeGraph.
        :rtype: Dict[str, MetaNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this MetaKnowledgeGraph.

        Collection of the most specific node categories provided by this TRAPI web service, indexed by Biolink class CURIEs. A node category is only exposed here if there is node for which that is the most specific category available.  # noqa: E501

        :param nodes: The nodes of this MetaKnowledgeGraph.
        :type nodes: Dict[str, MetaNode]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def edges(self):
        """Gets the edges of this MetaKnowledgeGraph.

        List of the most specific edges/predicates provided by this TRAPI web service. A predicate is only exposed here if there is an edge for which the predicate is the most specific available.  # noqa: E501

        :return: The edges of this MetaKnowledgeGraph.
        :rtype: List[MetaEdge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this MetaKnowledgeGraph.

        List of the most specific edges/predicates provided by this TRAPI web service. A predicate is only exposed here if there is an edge for which the predicate is the most specific available.  # noqa: E501

        :param edges: The edges of this MetaKnowledgeGraph.
        :type edges: List[MetaEdge]
        """
        if edges is None:
            raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501

        self._edges = edges
