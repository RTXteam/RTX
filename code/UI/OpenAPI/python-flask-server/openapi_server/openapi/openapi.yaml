openapi: 3.0.1
info:
  contact:
    email: edeutsch@systemsbiology.org
  description: TRAPI 1.0 endpoint for the NCATS Biomedical Translator Reasoner called
    ARAX
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://github.com/RTXteam/RTX/blob/master/LICENSE
  title: ARAX Translator Reasoner
  version: 1.0.0
  x-translator:
    component: ARA
    team: Expander Agent
externalDocs:
  description: Documentation for the NCATS Biomedical Translator Reasoners web services
  url: https://github.com/NCATSTranslator/ReasonerAPI
servers:
- description: ARAX Translator Reasoner API
  url: https://arax.ncats.io/devED/api/arax/v1.0
tags:
- description: Get supported relationships by source and target
  externalDocs:
    description: Documentation for the reasoner predicates function
    url: http://arax.ncats.io/devED/overview.html#predicates
  name: predicates
- description: Query reasoner using a predefined question type
  externalDocs:
    description: Documentation for the reasoner query function
    url: http://arax.ncats.io/devED/overview.html#query
  name: query
- name: translator
- name: reasoner
- description: Request a previously stored response from the server
  externalDocs:
    description: Documentation for the reasoner response function
    url: https://arax.ncats.io/devED/overview.html#response
  name: response
- description: Translate natural language question into a standardized query
  externalDocs:
    description: Documentation for the reasoner translate function
    url: https://arax.ncats.io/devED/overview.html#translate
  name: translate
- description: Return identifier and type of some entity in the knowledge graph
  externalDocs:
    description: Documentation for the reasoner entity function
    url: https://arax.ncats.io/devED/overview.html#entity
  name: entity
- description: Return a list of example questions that the reasoner can answer
  externalDocs:
    description: Documentation for the reasoner exampleQuestions function
    url: https://arax.ncats.io/devED/overview.html#exampleQuestions
  name: exampleQuestions
- description: Query to get the Normalized Google Distance between two MeSH terms
    based on co-occurance in all PubMed article annotations
  externalDocs:
    description: Documentation for the reasoner PubmedMeshNgd function
    url: https://arax.ncats.io/devED/overview.html#PubmedMeshNgd
  name: PubmedMeshNgd
paths:
  /PubmedMeshNgd/{term1}/{term2}:
    get:
      operationId: pubmed_mesh_ngd
      parameters:
      - description: First of two terms. Order not important.
        explode: false
        in: path
        name: term1
        required: true
        schema:
          type: string
        style: simple
      - description: Second of two terms. Order not important.
        explode: false
        in: path
        name: term2
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeshNgdResponse'
          description: successful operation
        "400":
          description: Invalid terms
      summary: Query to get the Normalized Google Distance between two MeSH terms
        based on co-occurrence in all PubMed article annotations
      tags:
      - PubmedMeshNgd
      x-openapi-router-controller: openapi_server.controllers.pubmed_mesh_ngd_controller
  /entity:
    get:
      operationId: get_entity
      parameters:
      - description: A string to search by (name, abbreviation, CURIE, etc.). The
          parameter may be repeated for multiple search strings.
        explode: true
        in: query
        name: q
        required: true
        schema:
          example:
          - MESH:D014867
          - NCIT:C34373
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: successful operation
        "404":
          description: Entity not found
      summary: Obtain CURIE and synonym information about a search term
      tags:
      - entity
      x-openapi-router-controller: openapi_server.controllers.entity_controller
  /exampleQuestions:
    get:
      operationId: example_questions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: successful operation
      summary: Request a list of example questions that ARAX can answer
      tags:
      - exampleQuestions
      x-openapi-router-controller: openapi_server.controllers.example_questions_controller
  /predicates:
    get:
      operationId: predicates
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  additionalProperties:
                    description: Array of predicates
                    items:
                      type: string
                    type: array
                  description: Target map
                  type: object
                description: Source map
                example:
                  biolink:ChemicalSubstance:
                    biolink:Gene:
                    - biolink:directly_interacts_with
                    - biolink:decreases_activity_of
                type: object
          description: Predicates by source and target
      summary: Get supported relationships by source and target
      tags:
      - predicates
      x-openapi-router-controller: openapi_server.controllers.predicates_controller
  /query:
    post:
      operationId: query
      parameters:
      - description: |
          Set to true in order to bypass any possible cached response and try to answer the query over again
        explode: true
        in: query
        name: bypass_cache
        required: false
        schema:
          default: false
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
        description: Query information to be submitted
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: OK. There may or may not be results. Note that some of the
            provided identifiers may not have been recognized.
        "400":
          content:
            application/json:
              schema:
                type: string
          description: Bad request. The request is invalid according to this OpenAPI
            schema OR a specific identifier is believed to be invalid somehow (not
            just unrecognized).
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal server error.
        "501":
          content:
            application/json:
              schema:
                type: string
          description: Not implemented.
      summary: Query reasoner via one of several inputs
      tags:
      - query
      x-openapi-router-controller: openapi_server.controllers.query_controller
  /response/{response_id}:
    get:
      operationId: get_response
      parameters:
      - description: Integer identifier of the response to return
        explode: false
        in: path
        name: response_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: successful operation
        "404":
          description: response_id not found
      summary: Request a previously stored response from the server
      tags:
      - response
      x-openapi-router-controller: openapi_server.controllers.response_controller
  /translate:
    post:
      operationId: translate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
        description: Question information to be translated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Query'
                type: array
          description: successful operation
        "400":
          description: Invalid status value
      summary: Translate natural language question into a standardized query
      tags:
      - translate
      x-openapi-router-controller: openapi_server.controllers.translate_controller
components:
  schemas:
    Query:
      additionalProperties: true
      description: The Query class is used to package a user request for information.
        A Query object consists of a required Message object with optional additional
        properties. Additional properties are intended to convey implementation-specific
        or query-independent parameters. For example, an additional property specifying
        a log level could allow a user to override the default log level in order
        to receive more fine-grained log information when debugging an issue.
      example:
        bypass_cache: "true"
        page_number: 1
        asynchronous: "false"
        max_results: 100
        message:
          query_graph:
            edges:
              e00:
                subject: n00
                object: n01
                predicate: biolink:physically_interacts_with
            nodes:
              n00:
                id: CHEMBL.COMPOUND:CHEMBL112
                category: biolink:ChemicalSubstance
              n01:
                category: biolink:Protein
        page_size: 50
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/Message'
          description: The query Message is a serialization of the user request. Content
            of the Message object depends on the intended TRAPI operation. For example,
            the fill operation requires a non-empty query_graph field as part of the
            Message, whereas other operations, e.g. overlay, require non-empty results
            and knowledge_graph fields.
        bypass_cache:
          description: Set to true in order to bypass any possible cached message
            and try to answer the query over again
          example: "true"
          type: string
        asynchronous:
          description: Set to true in order to receive an incomplete message_id if
            the query will take a while. Client can then periodically request that
            message_id for a status update and eventual complete message
          example: "false"
          type: string
        max_results:
          description: Maximum number of individual results to return
          example: 100
          type: integer
        page_size:
          description: Split the results into pages with this number of results each
          example: 20
          type: integer
        page_number:
          description: Page number of results when the number of results exceeds the
            page_size
          example: 1
          type: integer
        reasoner_ids:
          description: List of reasoners to consult for the query. By default it is
            assumed to be the current reasoner being queried, but this mechanism could
            be used to proxy queries to other reasoners.
          items:
            type: string
          type: array
        operations:
          allOf:
          - $ref: '#/components/schemas/Operations'
          description: Container for one or more Message objects or identifiers for
            one or more Messages along with a processing plan and options for how
            those messages should be processed and returned
      required:
      - message
      type: object
      x-body-name: request_body
    Response:
      additionalProperties: true
      description: The Response object contains the main payload when a TRAPI query
        endpoint interprets and responds to the submitted query successfully (i.e.,
        HTTP Status Code 200). The message property contains the knowledge of the
        response (query graph, knowledge graph, and results). The status, description,
        and logs properties provide additional details about the response.
      example:
        original_question: what proteins are affected by sickle cell anemia
        query_options:
          coalesce: true
          threshold: 0.9
        restated_question: Which proteins are affected by sickle cell anemia?
        description: Success. 42 results found.
        message: ""
        type: TranslatorAPIResponse
        query_type_id: Q2
        schema_version: 1.0.0
        datetime: 2021-01-09 12:34:45
        operations: ""
        table_column_names:
        - chemical_substance.name
        - chemical_substance.id
        tool_version: ARAX 0.7.0
        terms:
          key: '{}'
        context: https://rtx.ncats.io/ns/translator.jsonld
        reasoner_id: ARAX
        id: https://arax.ncats.io/devED/api/rtx/v1.0/response/123
        logs:
        - code: code
          level: ERROR
          message: message
          timestamp: 2020-09-03T18:13:49Z
        - code: code
          level: ERROR
          message: message
          timestamp: 2020-09-03T18:13:49Z
        status: Success
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/Message'
          description: Contains the knowledge of the response (query graph, knowledge
            graph, and results).
        status:
          description: One of a standardized set of short codes, e.g. Success, QueryNotTraversable,
            KPsNotAvailable
          example: Success
          nullable: true
          type: string
        description:
          description: A brief human-readable description of the outcome
          example: Success. 42 results found.
          nullable: true
          type: string
        logs:
          description: Log entries containing errors, warnings, debugging information,
            etc
          items:
            $ref: '#/components/schemas/LogEntry'
          nullable: true
          type: array
        operations:
          allOf:
          - $ref: '#/components/schemas/Operations'
          description: Container for one or more Message objects or identifiers for
            one or more Messages along with the processing plan and options for how
            those messages were processed and returned
        reasoner_id:
          description: Identifier string of the reasoner that provided this response
            (one of ARAX, Robokop, etc.)
          example: ARAX
          type: string
        tool_version:
          description: Version label of the tool that generated this response
          example: ARAX 0.7.0
          type: string
        schema_version:
          description: Version label of this TRAPI schema
          example: 1.0.0
          type: string
        datetime:
          description: Datetime string for the time that this response was generated
          example: 2021-01-09 12:34:45
          type: string
        table_column_names:
          description: List of column names that corresponds to the row_data for each
            result
          example:
          - chemical_substance.name
          - chemical_substance.id
          items:
            type: string
          type: array
        original_question:
          description: The original question text typed in by the user
          example: what proteins are affected by sickle cell anemia
          type: string
        restated_question:
          description: A precise restatement of the question, as understood by the
            Translator, for which the answer applies. The user should verify that
            the restated question matches the intent of their original question (it
            might not).
          example: Which proteins are affected by sickle cell anemia?
          type: string
        query_type_id:
          description: The query type id if one is known for the query/message (as
            defined in a shared manner)
          example: Q2
          type: string
        terms:
          additionalProperties: true
          description: Dict of terms needed by the specific query type
          properties:
            disease:
              example: malaria
              type: string
            protein:
              example: P12345
              type: string
            anatomical_entity:
              example: liver
              type: string
            chemical_substance:
              example: ibuprofen
              type: string
            metabolite:
              example: ibuprofen
              type: string
          type: object
        query_options:
          description: Dict of options that can be sent with the query. Options are
            tool specific and not stipulated here
          example:
            coalesce: true
            threshold: 0.9
          type: object
        context:
          description: JSON-LD context URI
          example: https://rtx.ncats.io/ns/translator.jsonld
          type: string
        type:
          description: Entity type of this response
          example: TranslatorAPIResponse
          type: string
        id:
          description: URI for this response
          example: https://arax.ncats.io/devED/api/rtx/v1.0/response/123
          type: string
      required:
      - message
      type: object
    Message:
      additionalProperties: false
      description: 'The message object holds the main content of a Query or a Response
        in three properties: query_graph, results, and knowledge_graph. The query_graph
        property contains the query configuration, the results property contains any
        answers that are returned by the service, and knowledge_graph property contains
        lists of edges and nodes in the thought graph corresponding to this message.
        The content of these properties is context-dependent to the encompassing object
        and the TRAPI operation requested.'
      example:
        query_graph:
          edges:
            e00:
              subject: n00
              object: n01
              predicate: biolink:physically_interacts_with
          nodes:
            n00:
              id: CHEMBL.COMPOUND:CHEMBL112
              category: biolink:ChemicalSubstance
            n01:
              category: biolink:Protein
      properties:
        results:
          description: List of all returned Result objects for the query posed
          items:
            $ref: '#/components/schemas/Result'
          nullable: true
          type: array
        query_graph:
          allOf:
          - $ref: '#/components/schemas/QueryGraph'
          description: QueryGraph object that contains a serialization of a query
            in the form of a graph
          nullable: true
        knowledge_graph:
          allOf:
          - $ref: '#/components/schemas/KnowledgeGraph'
          description: KnowledgeGraph object that contains lists of nodes and edges
            in the thought graph corresponding to the message
          nullable: true
      type: object
    LogEntry:
      additionalProperties: true
      description: The LogEntry object contains information useful for tracing and
        debugging across Translator components.  Although an individual component
        (for example, an ARA or KP) may have its own logging and debugging infrastructure,
        this internal information is not, in general, available to other components.
        In addition to a timestamp and logging level, LogEntry includes a string intended
        to be read by a human, along with one of a standardized set of codes describing
        the condition of the component sending the message.
      example:
        code: code
        level: ERROR
        message: message
        timestamp: 2020-09-03T18:13:49Z
      properties:
        timestamp:
          description: Timestamp in ISO 8601 format
          example: 2020-09-03T18:13:49Z
          format: date-time
          nullable: true
          type: string
        level:
          description: Logging level
          enum:
          - ERROR
          - WARNING
          - INFO
          - DEBUG
          nullable: true
          type: string
        code:
          description: One of a standardized set of short codes e.g. QueryNotTraversable,
            KPNotAvailable, KPResponseMalformed
          nullable: true
          type: string
        message:
          description: A human-readable log message
          nullable: true
          type: string
      type: object
    Result:
      additionalProperties: true
      description: A Result object specifies the nodes and edges in the knowledge
        graph that satisfy the structure or conditions of a user-submitted query graph.
        It must contain a NodeBindings object (list of query graph node to knowledge
        graph node mappings) and an EdgeBindings object (list of query graph edge
        to knowledge graph edge mappings).
      properties:
        node_bindings:
          additionalProperties:
            items:
              $ref: '#/components/schemas/NodeBinding'
            type: array
          description: The dictionary of Input Query Graph to Result Knowledge Graph
            node bindings where the dictionary keys are the key identifiers of the
            Query Graph nodes and the associated values of those keys are instances
            of NodeBinding schema type (see below). This value is an array of NodeBindings
            since a given query node may have multiple knowledge graph Node bindings
            in the result.
          type: object
        edge_bindings:
          additionalProperties:
            items:
              $ref: '#/components/schemas/EdgeBinding'
            type: array
          description: The dictionary of Input Query Graph to Result Knowledge Graph
            edge bindings where the dictionary keys are the key identifiers of the
            Query Graph edges and the associated values of those keys are instances
            of EdgeBinding schema type (see below). This value is an array of EdgeBindings
            since a given query edge may resolve to multiple knowledge graph edges
            in the result.
          type: object
        id:
          description: URI for this result
          example: result:234
          type: string
          nullable: true
        description:
          description: A free text description of this result answer from the reasoner
          example: The genetic condition sickle cell anemia may provide protection
            from cerebral malaria via genetic alterations of proteins HBB (P68871)
            and HMOX1 (P09601).
          type: string
          nullable: true
        essence:
          description: A single string that is the terse essence of the result (useful
            for simple answers)
          example: ibuprofen
          type: string
          nullable: true
        essence_category:
          description: A Translator BioLink bioentity category of the essence
          example: biolink:ChemicalSubstance
          type: string
          nullable: true
        row_data:
          description: An arbitrary list of values that captures the essence of the
            result that can be turned into a tabular result across all answers (each
            result is a row) for a user that wants simplified tabular output
          example:
          - ibuprofen
          - CHEMBL:CHEMBL521
          type: array
          nullable: true
        score:
          description: Any type of score associated with this result
          example: 163.233
          format: float
          type: number
          nullable: true
        score_name:
          description: Name for the score
          example: Jaccard distance
          type: string
          nullable: true
        score_direction:
          description: 'Sorting indicator for the score: one of higher_is_better or
            lower_is_better'
          example: lower_is_better
          type: string
          nullable: true
        confidence:
          description: |-
            Confidence metric for this result, a value between (inclusive)
             0.0 (no confidence) and 1.0 (highest confidence)
          example: 0.9234
          format: float
          type: number
          nullable: true
        result_group:
          description: An integer group number for results for use in cases where
            several results should be grouped together. Also useful to control sorting
            ascending.
          example: 1
          type: integer
          nullable: true
        result_group_similarity_score:
          description: A score that denotes the similarity of this result to other
            members of the result_group
          example: 0.95
          format: float
          type: number
          nullable: true
        reasoner_id:
          description: Identifier string of the reasoner that provided this result
            (e.g., ARAX, Robokop, etc.)
          example: ARAX
          type: string
          nullable: true
      required:
      - edge_bindings
      - node_bindings
      type: object
    NodeBinding:
      additionalProperties: true
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/CURIE'
          description: An instance of NodeBinding is a single KnowledgeGraph Node
            mapping, identified by the corresponding 'id' object key identifier of
            the Node within the Knowledge Graph. Instances of NodeBinding may include
            extra annotation (such annotation is not yet fully standardized).
      required:
      - id
      type: object
    EdgeBinding:
      additionalProperties: true
      description: A instance of EdgeBinding is a single KnowledgeGraph Edge mapping,
        identified by the corresponding 'id' object key identifier of the Edge within
        the Knowledge Graph. Instances of EdgeBinding may include extra annotation
        (such annotation is not yet fully standardized).
      properties:
        id:
          description: The key identifier of a specific KnowledgeGraph Edge.
          type: string
      required:
      - id
      type: object
    KnowledgeGraph:
      additionalProperties: true
      description: The knowledge graph associated with a set of results. The instances
        of Node and Edge defining this graph represent instances of biolink:NamedThing
        (concept nodes) and biolink:Association (relationship edges) representing
        (Attribute) annotated knowledge returned from the knowledge sources and inference
        agents wrapped by the given TRAPI implementation.
      properties:
        nodes:
          additionalProperties:
            $ref: '#/components/schemas/Node'
          description: Dictionary of Node instances used in the KnowledgeGraph, referenced
            elsewhere in the TRAPI output by the dictionary key.
          type: object
        edges:
          additionalProperties:
            $ref: '#/components/schemas/Edge'
          description: Dictionary of Edge instances used in the KnowledgeGraph, referenced
            elsewhere in the TRAPI output by the dictionary key.
          type: object
      required:
      - edges
      - nodes
      type: object
    QueryGraph:
      additionalProperties: true
      description: A graph representing a biomedical question. It serves as a template
        for each result (answer), where each bound knowledge graph node/edge is expected
        to obey the constraints of the associated query graph element.
      properties:
        nodes:
          additionalProperties:
            $ref: '#/components/schemas/QNode'
          description: The node specifications. The keys of this map are unique node
            identifiers and the corresponding values include the constraints on bound
            nodes.
          type: object
        edges:
          additionalProperties:
            $ref: '#/components/schemas/QEdge'
          description: The edge specifications. The keys of this map are unique edge
            identifiers and the corresponding values include the constraints on bound
            edges, in addition to specifying the subject and object QNodes.
          type: object
      required:
      - edges
      - nodes
      type: object
    QNode:
      additionalProperties: true
      description: A node in the QueryGraph used to represent an entity in a query.
        If a CURIE is not specified, any nodes matching the category of the QNode
        will be returned in the Results.
      properties:
        id:
          description: CURIE identifier for this node
          example: OMIM:603903
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/CURIE'
          - items:
              $ref: '#/components/schemas/CURIE'
            type: array
        category:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/BiolinkEntity'
          - items:
              $ref: '#/components/schemas/BiolinkEntity'
            type: array
        is_set:
          default: false
          description: Boolean that if set to true, indicates that this QNode MAY
            have multiple KnowledgeGraph Nodes bound to it within each Result. The
            nodes in a set should be considered as a set of independent nodes, rather
            than a set of dependent nodes, i.e., the answer would still be valid if
            the nodes in the set were instead returned individually. Multiple QNodes
            may have is_set=True. If a QNode (n1) with is_set=True is connected to
            a QNode (n2) with is_set=False, each n1 must be connected to n2. If a
            QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True,
            each n1 must be connected to at least one n2.
          type: boolean
        option_group_id:
          description: 'Optional string acting as a label on a set of nodes and/or
            edges indicating that they belong to a group that are to be evaluated
            as a group. '
          type: string
      type: object
    QEdge:
      additionalProperties: true
      description: An edge in the QueryGraph used as an filter pattern specification
        in a query. If optional predicate or relation properties are not specified,
        they are assumed to be wildcard matches to the target knowledge space. If
        specified, the ontological inheritance hierarchy associated with the terms
        provided is assumed, such that edge bindings returned may be an exact match
        to the given QEdge predicate or relation term ('class'), or to a term which
        is a subclass of the QEdge specified term.
      properties:
        predicate:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/BiolinkPredicate'
          - items:
              $ref: '#/components/schemas/BiolinkPredicate'
            type: array
        relation:
          description: Query constraint against the relationship type term of this
            edge, as originally specified by, or curated by inference from, the original
            external source of knowledge. Note that this should often be specified
            as predicate ontology term CURIE, although this may not be strictly enforced.
          example: RO:0002447
          nullable: true
          type: string
        subject:
          description: Corresponds to the map key identifier of the subject concept
            node anchoring the query filter pattern for the query relationship edge.
          example: https://omim.org/entry/603903
          type: string
        object:
          description: Corresponds to the map key identifier of the object concept
            node anchoring the query filter pattern for the query relationship edge.
          example: https://www.uniprot.org/uniprot/P00738
          type: string
        exclude:
          description: If set to true, then all subgraphs containing this edge are
            excluded from the final results. (optional)
          type: boolean
        option_group_id:
          description: 'Optional string acting as a label on a set of nodes and/or
            edges indicating that they belong to a group that are to be evaluated
            as a group. '
          type: string
      required:
      - object
      - subject
      type: object
    Node:
      additionalProperties: false
      description: A node in the KnowledgeGraph which represents some biomedical concept.
        Nodes are identified by the keys in the KnowledgeGraph Node mapping.
      properties:
        name:
          description: Formal name of the entity
          example: Haptoglobin
          nullable: true
          type: string
        category:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/BiolinkEntity'
          - items:
              $ref: '#/components/schemas/BiolinkEntity'
            type: array
        attributes:
          description: A list of attributes describing the node
          items:
            $ref: '#/components/schemas/Attribute'
          nullable: true
          type: array
      type: object
    Attribute:
      additionalProperties: false
      description: Generic attribute for a node or an edge that expands key-value
        pair concept by including a type of this attribute from a suitable ontology,
        a source of this attribute, and (optionally) a url with additional information
        about this attribute.
      properties:
        name:
          description: Human-readable name or label for the attribute. If appropriate,
            should be the name of the semantic type term.
          example: PubMed Identifier
          nullable: true
          type: string
        value:
          description: Value of the attribute. May be any data type, including a list.
          example: 32529952
        type:
          allOf:
          - $ref: '#/components/schemas/CURIE'
          description: CURIE of the semantic type of the attribute. For properties
            defined by the Biolink model this should be a biolink CURIE, otherwise,
            if possible, from the EDAM ontology. If a suitable identifier does not
            exist, enter a descriptive phrase here and submit the new type for consideration
            by the appropriate authority.
          example: EDAM:data_1187
        url:
          description: Human-consumable URL to link out and provide additional information
            about the attribute (not the node or the edge).
          example: https://pubmed.ncbi.nlm.nih.gov/32529952
          nullable: true
          type: string
        source:
          description: Source of the attribute, preferably as a CURIE prefix.
          example: UniProtKB
          nullable: true
          type: string
      required:
      - type
      - value
      type: object
    Edge:
      additionalProperties: false
      description: A specification of the semantic relationship linking two concepts
        that are expressed as nodes in the knowledge "thought" graph resulting from
        a query upon the underlying knowledge source.
      properties:
        predicate:
          allOf:
          - $ref: '#/components/schemas/BiolinkPredicate'
          nullable: true
        relation:
          description: The relationship type term of this edge, originally specified
            by, or curated by inference from, the original source of knowledge. This
            should generally be specified as predicate ontology CURIE.
          example: RO:0002447
          nullable: true
          type: string
        subject:
          allOf:
          - $ref: '#/components/schemas/CURIE'
          description: Corresponds to the map key CURIE of the subject concept node
            of this relationship edge.
          example: OMIM:603903
        object:
          allOf:
          - $ref: '#/components/schemas/CURIE'
          description: Corresponds to the map key CURIE of the object concept node
            of this relationship edge.
          example: UniProtKB:P00738
        attributes:
          description: A list of additional attributes for this edge
          items:
            $ref: '#/components/schemas/Attribute'
          nullable: true
          type: array
      required:
      - object
      - subject
      type: object
    BiolinkEntity:
      description: Compact URI (CURIE) for a Biolink class, biolink:NamedThing or
        a child thereof. The CURIE must use the prefix 'biolink:' followed by the
        PascalCase class name.
      example: biolink:PhenotypicFeature
      externalDocs:
        description: Biolink model entities
        url: https://biolink.github.io/biolink-model/docs/NamedThing.html
      pattern: ^biolink:[A-Z][a-zA-Z]*$
      type: string
    BiolinkPredicate:
      description: CURIE for a Biolink 'predicate' slot, taken from the Biolink slot
        ('is_a') hierarchy rooted in biolink:related_to (snake_case). This predicate
        defines the Biolink relationship between the subject and object nodes of a
        biolink:Association defining a knowledge graph edge.
      example: biolink:interacts_with
      externalDocs:
        description: Biolink model predicates
        url: https://biolink.github.io/biolink-model/docs/related_to.html
      pattern: ^biolink:[a-z][a-z_]*$
      type: string
    CURIE:
      description: A Compact URI, consisting of a prefix and a reference separated
        by a colon, such as UniProtKB:P00738. Via an external context definition,
        the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/,
        to form a full URI.
      externalDocs:
        url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
      type: string
      nullable: true
    Operations:
      additionalProperties: true
      description: Container for one or more Message objects or identifiers for one
        or more Messages along with a processing plan and options for how those messages
        should be processed and returned
      properties:
        message_uris:
          description: List of URIs for Message or Response objects to fetch and process
          example:
          - https://arax.ncats.io/devED/api/arax/v1.0/response/38
          items:
            type: string
          type: array
        messages:
          description: List of Message objects to process
          items:
            $ref: '#/components/schemas/Message'
          type: array
        actions:
          description: List of order-dependent operations to execute
          example:
          - add_qnode(name=acetaminophen, key=n00)
          - add_qnode(category=biolink:Protein, key=n01)
          - add_qedge(subject=n01, object=n00, key=e00)
          - expand(edge_key=e00)
          - resultify()
          - filter_results(action=limit_number_of_results, max_results=10)
          items:
            type: string
          type: array
        options:
          additionalProperties: true
          description: Map of order independent options that apply during processing
          example:
            halt_on_warning: false
          type: object
      type: object
    Question:
      additionalProperties: true
      properties:
        text:
          description: Free text question
          example: what genetic conditions offer protection against malaria
          type: string
        language:
          description: Human language in which the question is posed
          enum:
          - English
          example: English
          type: string
      type: object
    MeshNgdResponse:
      example:
        result_code: TermNotFound
        message: Term 1 'malria' not found in MeSH
        value: 0.714
      properties:
        result_code:
          description: Set to OK for success, or some other short string to indicate
            and error (e.g., TermNotFound, etc.)
          example: TermNotFound
          type: string
        message:
          description: Extended message denoting the success or mode of failure for
            request
          example: Term 1 'malria' not found in MeSH
          type: string
        value:
          description: Calculated Normalized Google Distance for the two supplied
            terms
          example: 0.714
          format: float
          type: number
      type: object
