# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.attribute_constraint import AttributeConstraint
from openapi_server import util

from openapi_server.models.attribute_constraint import AttributeConstraint  # noqa: E501

class QNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ids=None, categories=None, set_interpretation=False, set_id=False, constraints=[], option_group_id=None):  # noqa: E501
        """QNode - a model defined in OpenAPI

        :param ids: The ids of this QNode.  # noqa: E501
        :type ids: List[str]
        :param categories: The categories of this QNode.  # noqa: E501
        :type categories: List[str]
        :param set_interpretation: The set_interpretation of this QNode.  # noqa: E501
        :type set_interpretation: str
        :param set_id: The set_id of this QNode.  # noqa: E501
        :type set_id: str
        :param constraints: The constraints of this QNode.  # noqa: E501
        :type constraints: List[AttributeConstraint]
        :param option_group_id: The option_group_id of this QNode.  # noqa: E501
        :type option_group_id: str
        """
        self.openapi_types = {
            'ids': List[str],
            'categories': List[str],
            'set_interpretation': str,
            'set_id': str,
            'constraints': List[AttributeConstraint],
            'option_group_id': str
        }

        self.attribute_map = {
            'ids': 'ids',
            'categories': 'categories',
            'set_interpretation': 'set_interpretation',
            'set_id': 'set_id',
            'constraints': 'constraints',
            'option_group_id': 'option_group_id'
        }

        self._ids = ids
        self._categories = categories
        self._set_interpretation = set_interpretation
        self._set_id = set_id
        self._constraints = constraints
        self._option_group_id = option_group_id

    @classmethod
    def from_dict(cls, dikt) -> 'QNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QNode of this QNode.  # noqa: E501
        :rtype: QNode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ids(self):
        """Gets the ids of this QNode.

        CURIE identifier for this node  # noqa: E501

        :return: The ids of this QNode.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this QNode.

        CURIE identifier for this node  # noqa: E501

        :param ids: The ids of this QNode.
        :type ids: List[str]
        """
        if ids is not None and len(ids) < 1:
            raise ValueError("Invalid value for `ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ids = ids

    @property
    def categories(self):
        """Gets the categories of this QNode.


        :return: The categories of this QNode.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this QNode.


        :param categories: The categories of this QNode.
        :type categories: List[str]
        """
        if categories is not None and len(categories) < 1:
            raise ValueError("Invalid value for `categories`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._categories = categories

    @property
    def set_interpretation(self):
        """Gets the set_interpretation of this QNode.

        Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.  # noqa: E501

        :return: The set_interpretation of this QNode.
        :rtype: str
        """
        return self._set_interpretation

    @set_interpretation.setter
    def set_interpretation(self, set_interpretation):
        """Sets the set_interpretation of this QNode.

        Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.  # noqa: E501

        :param set_interpretation: The set_interpretation of this QNode.
        :type set_interpretation: str
        """

        self._set_interpretation = set_interpretation

    @property
    def set_id(self):
        """Gets the set_id of this QNode.

        Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.  # noqa: E501

        :return: The set_id of this QNode.
        :rtype: str
        """
        return self._set_id

    @set_id.setter
    def set_id(self, set_id):
        """Sets the set_id of this QNode.

        Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.  # noqa: E501

        :param set_id: The set_id of this QNode.
        :type set_id: str
        """

        self._set_id = set_id

    @property
    def constraints(self):
        """Gets the constraints of this QNode.

        A list of contraints applied to a query node. If there are multiple items, they must all be true (equivalent to AND)  # noqa: E501

        :return: The constraints of this QNode.
        :rtype: List[AttributeConstraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this QNode.

        A list of contraints applied to a query node. If there are multiple items, they must all be true (equivalent to AND)  # noqa: E501

        :param constraints: The constraints of this QNode.
        :type constraints: List[AttributeConstraint]
        """

        self._constraints = constraints

    @property
    def option_group_id(self):
        """Gets the option_group_id of this QNode.

        Optional string acting as a label on a set of nodes and/or edges indicating that they belong to a group that are to be evaluated as a group.   # noqa: E501

        :return: The option_group_id of this QNode.
        :rtype: str
        """
        return self._option_group_id

    @option_group_id.setter
    def option_group_id(self, option_group_id):
        """Sets the option_group_id of this QNode.

        Optional string acting as a label on a set of nodes and/or edges indicating that they belong to a group that are to be evaluated as a group.   # noqa: E501

        :param option_group_id: The option_group_id of this QNode.
        :type option_group_id: str
        """

        self._option_group_id = option_group_id
