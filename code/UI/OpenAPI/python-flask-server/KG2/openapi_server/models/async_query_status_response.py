# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.log_entry import LogEntry
from openapi_server import util

from openapi_server.models.log_entry import LogEntry  # noqa: E501

class AsyncQueryStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, description=None, logs=None, response_url=None):  # noqa: E501
        """AsyncQueryStatusResponse - a model defined in OpenAPI

        :param status: The status of this AsyncQueryStatusResponse.  # noqa: E501
        :type status: str
        :param description: The description of this AsyncQueryStatusResponse.  # noqa: E501
        :type description: str
        :param logs: The logs of this AsyncQueryStatusResponse.  # noqa: E501
        :type logs: List[LogEntry]
        :param response_url: The response_url of this AsyncQueryStatusResponse.  # noqa: E501
        :type response_url: str
        """
        self.openapi_types = {
            'status': str,
            'description': str,
            'logs': List[LogEntry],
            'response_url': str
        }

        self.attribute_map = {
            'status': 'status',
            'description': 'description',
            'logs': 'logs',
            'response_url': 'response_url'
        }

        self._status = status
        self._description = description
        self._logs = logs
        self._response_url = response_url

    @classmethod
    def from_dict(cls, dikt) -> 'AsyncQueryStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AsyncQueryStatusResponse of this AsyncQueryStatusResponse.  # noqa: E501
        :rtype: AsyncQueryStatusResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this AsyncQueryStatusResponse.

        One of a standardized set of short codes: Queued, Running, Completed, Failed  # noqa: E501

        :return: The status of this AsyncQueryStatusResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AsyncQueryStatusResponse.

        One of a standardized set of short codes: Queued, Running, Completed, Failed  # noqa: E501

        :param status: The status of this AsyncQueryStatusResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def description(self):
        """Gets the description of this AsyncQueryStatusResponse.

        A brief human-readable description of the current state or summary of the problem if the status is Failed.  # noqa: E501

        :return: The description of this AsyncQueryStatusResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AsyncQueryStatusResponse.

        A brief human-readable description of the current state or summary of the problem if the status is Failed.  # noqa: E501

        :param description: The description of this AsyncQueryStatusResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def logs(self):
        """Gets the logs of this AsyncQueryStatusResponse.

        A list of LogEntry items, containing errors, warnings, debugging information, etc. List items MUST be in chronological order with earliest first. The most recent entry should be last. Its timestamp will be compared against the current time to see if there is still activity.  # noqa: E501

        :return: The logs of this AsyncQueryStatusResponse.
        :rtype: List[LogEntry]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this AsyncQueryStatusResponse.

        A list of LogEntry items, containing errors, warnings, debugging information, etc. List items MUST be in chronological order with earliest first. The most recent entry should be last. Its timestamp will be compared against the current time to see if there is still activity.  # noqa: E501

        :param logs: The logs of this AsyncQueryStatusResponse.
        :type logs: List[LogEntry]
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")  # noqa: E501

        self._logs = logs

    @property
    def response_url(self):
        """Gets the response_url of this AsyncQueryStatusResponse.

        Optional URL that can be queried to restrieve the full TRAPI Response.  # noqa: E501

        :return: The response_url of this AsyncQueryStatusResponse.
        :rtype: str
        """
        return self._response_url

    @response_url.setter
    def response_url(self, response_url):
        """Sets the response_url of this AsyncQueryStatusResponse.

        Optional URL that can be queried to restrieve the full TRAPI Response.  # noqa: E501

        :param response_url: The response_url of this AsyncQueryStatusResponse.
        :type response_url: str
        """

        self._response_url = response_url
