# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MetaNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_prefixes=None):  # noqa: E501
        """MetaNode - a model defined in OpenAPI

        :param id_prefixes: The id_prefixes of this MetaNode.  # noqa: E501
        :type id_prefixes: List[str]
        """
        self.openapi_types = {
            'id_prefixes': List[str]
        }

        self.attribute_map = {
            'id_prefixes': 'id_prefixes'
        }

        self._id_prefixes = id_prefixes

    @classmethod
    def from_dict(cls, dikt) -> 'MetaNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetaNode of this MetaNode.  # noqa: E501
        :rtype: MetaNode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_prefixes(self):
        """Gets the id_prefixes of this MetaNode.

        List of CURIE prefixes for the node category that this TRAPI web service understands and accepts on the input.  # noqa: E501

        :return: The id_prefixes of this MetaNode.
        :rtype: List[str]
        """
        return self._id_prefixes

    @id_prefixes.setter
    def id_prefixes(self, id_prefixes):
        """Sets the id_prefixes of this MetaNode.

        List of CURIE prefixes for the node category that this TRAPI web service understands and accepts on the input.  # noqa: E501

        :param id_prefixes: The id_prefixes of this MetaNode.
        :type id_prefixes: List[str]
        """
        if id_prefixes is None:
            raise ValueError("Invalid value for `id_prefixes`, must not be `None`")  # noqa: E501
        if id_prefixes is not None and len(id_prefixes) < 1:
            raise ValueError("Invalid value for `id_prefixes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._id_prefixes = id_prefixes
