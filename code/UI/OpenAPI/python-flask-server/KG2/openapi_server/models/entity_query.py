# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EntityQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, terms=None, format=None):  # noqa: E501
        """EntityQuery - a model defined in OpenAPI

        :param terms: The terms of this EntityQuery.  # noqa: E501
        :type terms: List[str]
        :param format: The format of this EntityQuery.  # noqa: E501
        :type format: str
        """
        self.openapi_types = {
            'terms': List[str],
            'format': str
        }

        self.attribute_map = {
            'terms': 'terms',
            'format': 'format'
        }

        self._terms = terms
        self._format = format

    @classmethod
    def from_dict(cls, dikt) -> 'EntityQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EntityQuery of this EntityQuery.  # noqa: E501
        :rtype: EntityQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def terms(self):
        """Gets the terms of this EntityQuery.

        List of term strings to search for  # noqa: E501

        :return: The terms of this EntityQuery.
        :rtype: List[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this EntityQuery.

        List of term strings to search for  # noqa: E501

        :param terms: The terms of this EntityQuery.
        :type terms: List[str]
        """

        self._terms = terms

    @property
    def format(self):
        """Gets the format of this EntityQuery.

        Format of the response (full or compact)  # noqa: E501

        :return: The format of this EntityQuery.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this EntityQuery.

        Format of the response (full or compact)  # noqa: E501

        :param format: The format of this EntityQuery.
        :type format: str
        """

        self._format = format
