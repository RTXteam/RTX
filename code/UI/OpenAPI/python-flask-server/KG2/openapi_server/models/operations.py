# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.message import Message
from openapi_server import util

from openapi_server.models.message import Message  # noqa: E501

class Operations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_uris=None, messages=None, actions=None, options=None):  # noqa: E501
        """Operations - a model defined in OpenAPI

        :param message_uris: The message_uris of this Operations.  # noqa: E501
        :type message_uris: List[str]
        :param messages: The messages of this Operations.  # noqa: E501
        :type messages: List[Message]
        :param actions: The actions of this Operations.  # noqa: E501
        :type actions: List[str]
        :param options: The options of this Operations.  # noqa: E501
        :type options: Dict[str, object]
        """
        self.openapi_types = {
            'message_uris': List[str],
            'messages': List[Message],
            'actions': List[str],
            'options': Dict[str, object]
        }

        self.attribute_map = {
            'message_uris': 'message_uris',
            'messages': 'messages',
            'actions': 'actions',
            'options': 'options'
        }

        self._message_uris = message_uris
        self._messages = messages
        self._actions = actions
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'Operations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Operations of this Operations.  # noqa: E501
        :rtype: Operations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_uris(self):
        """Gets the message_uris of this Operations.

        List of URIs for Message or Response objects to fetch and process  # noqa: E501

        :return: The message_uris of this Operations.
        :rtype: List[str]
        """
        return self._message_uris

    @message_uris.setter
    def message_uris(self, message_uris):
        """Sets the message_uris of this Operations.

        List of URIs for Message or Response objects to fetch and process  # noqa: E501

        :param message_uris: The message_uris of this Operations.
        :type message_uris: List[str]
        """

        self._message_uris = message_uris

    @property
    def messages(self):
        """Gets the messages of this Operations.

        List of Message objects to process  # noqa: E501

        :return: The messages of this Operations.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Operations.

        List of Message objects to process  # noqa: E501

        :param messages: The messages of this Operations.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def actions(self):
        """Gets the actions of this Operations.

        List of order-dependent operations to execute  # noqa: E501

        :return: The actions of this Operations.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Operations.

        List of order-dependent operations to execute  # noqa: E501

        :param actions: The actions of this Operations.
        :type actions: List[str]
        """

        self._actions = actions

    @property
    def options(self):
        """Gets the options of this Operations.

        Map of order independent options that apply during processing  # noqa: E501

        :return: The options of this Operations.
        :rtype: Dict[str, object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Operations.

        Map of order independent options that apply during processing  # noqa: E501

        :param options: The options of this Operations.
        :type options: Dict[str, object]
        """

        self._options = options
