# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MetaAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_type_id=None, attribute_source=None, original_attribute_names=None, constraint_use=False, constraint_name=None):  # noqa: E501
        """MetaAttribute - a model defined in OpenAPI

        :param attribute_type_id: The attribute_type_id of this MetaAttribute.  # noqa: E501
        :type attribute_type_id: str
        :param attribute_source: The attribute_source of this MetaAttribute.  # noqa: E501
        :type attribute_source: str
        :param original_attribute_names: The original_attribute_names of this MetaAttribute.  # noqa: E501
        :type original_attribute_names: List[str]
        :param constraint_use: The constraint_use of this MetaAttribute.  # noqa: E501
        :type constraint_use: bool
        :param constraint_name: The constraint_name of this MetaAttribute.  # noqa: E501
        :type constraint_name: str
        """
        self.openapi_types = {
            'attribute_type_id': str,
            'attribute_source': str,
            'original_attribute_names': List[str],
            'constraint_use': bool,
            'constraint_name': str
        }

        self.attribute_map = {
            'attribute_type_id': 'attribute_type_id',
            'attribute_source': 'attribute_source',
            'original_attribute_names': 'original_attribute_names',
            'constraint_use': 'constraint_use',
            'constraint_name': 'constraint_name'
        }

        self._attribute_type_id = attribute_type_id
        self._attribute_source = attribute_source
        self._original_attribute_names = original_attribute_names
        self._constraint_use = constraint_use
        self._constraint_name = constraint_name

    @classmethod
    def from_dict(cls, dikt) -> 'MetaAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetaAttribute of this MetaAttribute.  # noqa: E501
        :rtype: MetaAttribute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_type_id(self):
        """Gets the attribute_type_id of this MetaAttribute.

        A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.  # noqa: E501

        :return: The attribute_type_id of this MetaAttribute.
        :rtype: str
        """
        return self._attribute_type_id

    @attribute_type_id.setter
    def attribute_type_id(self, attribute_type_id):
        """Sets the attribute_type_id of this MetaAttribute.

        A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.  # noqa: E501

        :param attribute_type_id: The attribute_type_id of this MetaAttribute.
        :type attribute_type_id: str
        """
        if attribute_type_id is None:
            raise ValueError("Invalid value for `attribute_type_id`, must not be `None`")  # noqa: E501

        self._attribute_type_id = attribute_type_id

    @property
    def attribute_source(self):
        """Gets the attribute_source of this MetaAttribute.

        Source of an attribute provided by this TRAPI web service.  # noqa: E501

        :return: The attribute_source of this MetaAttribute.
        :rtype: str
        """
        return self._attribute_source

    @attribute_source.setter
    def attribute_source(self, attribute_source):
        """Sets the attribute_source of this MetaAttribute.

        Source of an attribute provided by this TRAPI web service.  # noqa: E501

        :param attribute_source: The attribute_source of this MetaAttribute.
        :type attribute_source: str
        """

        self._attribute_source = attribute_source

    @property
    def original_attribute_names(self):
        """Gets the original_attribute_names of this MetaAttribute.

        Names of an the attribute as provided by the source.  # noqa: E501

        :return: The original_attribute_names of this MetaAttribute.
        :rtype: List[str]
        """
        return self._original_attribute_names

    @original_attribute_names.setter
    def original_attribute_names(self, original_attribute_names):
        """Sets the original_attribute_names of this MetaAttribute.

        Names of an the attribute as provided by the source.  # noqa: E501

        :param original_attribute_names: The original_attribute_names of this MetaAttribute.
        :type original_attribute_names: List[str]
        """

        self._original_attribute_names = original_attribute_names

    @property
    def constraint_use(self):
        """Gets the constraint_use of this MetaAttribute.

        Indicates whether this attribute can be used as a query constraint.  # noqa: E501

        :return: The constraint_use of this MetaAttribute.
        :rtype: bool
        """
        return self._constraint_use

    @constraint_use.setter
    def constraint_use(self, constraint_use):
        """Sets the constraint_use of this MetaAttribute.

        Indicates whether this attribute can be used as a query constraint.  # noqa: E501

        :param constraint_use: The constraint_use of this MetaAttribute.
        :type constraint_use: bool
        """

        self._constraint_use = constraint_use

    @property
    def constraint_name(self):
        """Gets the constraint_name of this MetaAttribute.

        Human-readable name or label for the constraint concept. Required whenever constraint_use is true.  # noqa: E501

        :return: The constraint_name of this MetaAttribute.
        :rtype: str
        """
        return self._constraint_name

    @constraint_name.setter
    def constraint_name(self, constraint_name):
        """Sets the constraint_name of this MetaAttribute.

        Human-readable name or label for the constraint concept. Required whenever constraint_use is true.  # noqa: E501

        :param constraint_name: The constraint_name of this MetaAttribute.
        :type constraint_name: str
        """

        self._constraint_name = constraint_name
