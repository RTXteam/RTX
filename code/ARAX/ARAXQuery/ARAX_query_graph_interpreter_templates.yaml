ARAX_QG_DSL_mapping: 0.2

# Node templates should have one of the following formats:
#   n00()                     - a node with no curie or categories specified
#   n00(categories)                 - a node with only a categories of any kind specified
#   n00(categories=biolink:Protein)         - a node with a specific categories (such as a biolink:Protein) specified
#   n00(ids)                - a node with one or more curies specified
#   n00(ids,categories=biolink:Protein)   - a node with one or more curies of the specified categories.
# Edge templates should have the following format:
#   e00()                     - an edge with no specification
#
# NOTE: Node order should always start with the most specific node (e.g. curie)
# NOTE: The first node should always be n00 and increment from there. And the first edge e00.
#       In order that incoming QNodes are properly remapped, these templates need to follow this n00, e00, n01, ... convention


templates:

  #### One node questions
  one_node_with_curie:
    name: One node what is question
    restated_question: What is n00(name)?
    description: A single node question, where the one node has a curie
    template:
      - n00(ids)
    DSL:
      - expand(node_key=n00)
      - resultify()

  one_node_with_categories:
    name: One node with only a categories
    description: A single node that has no curie but has a categories. This could easily generate thousands of things.
    restated_question: Which n00(categories)s are known?
    template:
      - n00(categories)
    error: The input QueryGraph would just lead to thousands of nodes with this categories. Not currently supported.

  one_node_with_no_categories:
    name: One node with not even a categories
    description: A single node that has no curie and no categories. This is like tell me everything
    restated_question: Which biological entities are known?
    template:
      - n00()
    error: The input QueryGraph would yield all nodes in our knowledge graph. Not currently supported.

  ####################################################################################################
  #### Two node, one-hop questions
  one_hop_classic_question_curie2ChemicalSubstance:
    name: One hop question with one curie and one categories node of categories biolink:ChemicalSubstance
    description: Two nodes, one of which has a curie and the other has a categories biolink:ChemicalSubstance
    comment: This is current just for testing. The DSL is the same as the next one
    restated_question: Which n01(categories)s are related to n00(name)?
    template:
      - n00(ids)
      - e00()
      - n01(categories=biolink:ChemicalSubstance)
    DSL:
      - expand()
      - overlay(action=compute_ngd, virtual_relation_label=N1, subject_qnode_key=n00, object_qnode_key=n01)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  one_hop_classic_question:
    name: One hop question with one curie and one categories node
    description: Two nodes, one of which has a curie and the other has a categories
    restated_question: Which n01(categories)s are related to n00(name)?
    template:
      - n00(ids)
      - e00()
      - n01(categories)
    DSL:
      - expand()
      - overlay(action=compute_ngd, virtual_relation_label=N1, subject_qnode_key=n00, object_qnode_key=n01)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  one_hop_two_curie_question:
    name: One hop question where both nodes are provided
    description: Two nodes, both of which have a curie
    restated_question: How are n00(name) and n01(name) directly related?
    template:
      - n00(ids)
      - e00()
      - n01(ids)
    DSL:
      - expand()
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  one_hop_all_connections:
    name: One hop question with one curie and one totally generic
    description: Two nodes, one of which has a curie and the other has no categories
    restated_question: What is n00(name) related to?
    template:
      - n00(ids)
      - e00()
      - n01()
    DSL:
      - expand()
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  one_hop_drug_treats_disease:
    name: one hop with start node drug, end node disease
    description: Two nodes, start has a specific curie, end node has categories specified as biolink:ChemicalSubstance (or drug?!)
    restated_question: What n01(categories)s is known to treat n00(name)?
    template:
      - n00(ids,categories=biolink:Disease)
      - e00(predicates=treats)
      - n01(categories=biolink:ChemicalSubstance)
    DSL:
      - expand()
      - overlay(action=compute_ngd, subject_qnode_key=n00, object_qnode_key=n01, virtual_relation_label=N1)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  one_hop_drug_somehow_related_to_disease:
    name: one hop with start node drug, end node disease
    description: Two nodes, start has a specific curie, end node has categories specified as biolink:ChemicalSubstance (or drug?!)
    restated_question: What n01(categories)s may treat n00(name)?
    template:
      - n00(ids,categories=biolink:Disease)
      - e00()
      - n01(categories=biolink:ChemicalSubstance)
    DSL:
      - expand()
      - overlay(action=overlay_clinical_info, observed_expected_ratio=true, subject_qnode_key=n00, object_qnode_key=n01, virtual_relation_label=CP1)
      - overlay(action=predict_drug_treats_disease, subject_qnode_key=n01, object_qnode_key=n00, virtual_relation_label=P1)
      - filter_kg(action=remove_edges_by_attribute, edge_attribute=probability_treats, direction=below, threshold=0.75, remove_connected_nodes=true, qnode_key=n01)
      - overlay(action=compute_ngd, subject_qnode_key=n00, object_qnode_key=n01, virtual_relation_label=N1)
      - resultify(ignore_edge_direction=true)
      - filter_results(action=limit_number_of_results, max_results=100)

  two_hop_drug_disease:
    name: one hop with start node drug, end node disease
    description: Two nodes, start has a specific curie, end node has categories specified as biolink:ChemicalSubstance (or drug?!)
    restated_question: What n01(categories)s may treat n00(name)?
    template:
      - n00(ids,categories=biolink:Disease)
      - e00()
      - n01(categories=biolink:Protein)
      - e01()
      - n01(categories=biolink:ChemicalSubstance)
    DSL:
      - expand()
      - overlay(action=compute_jaccard, start_node_key=n00, intermediate_node_key=n01, end_node_key=n02, virtual_relation_label=J1)
      - overlay(action=predict_drug_treats_disease, subject_qnode_key=n02, object_qnode_key=n00, virtual_relation_label=P1)
      - overlay(action=overlay_clinical_info, chi_square=true, virtual_relation_label=C1, subject_qnode_key=n00, object_qnode_key=n02)
      - overlay(action=compute_ngd, virtual_relation_label=N1, subject_qnode_key=n00, object_qnode_key=n01)
      - overlay(action=compute_ngd, virtual_relation_label=N2, subject_qnode_key=n00, object_qnode_key=n02)
      - overlay(action=compute_ngd, virtual_relation_label=N3, subject_qnode_key=n01, object_qnode_key=n02)
      - resultify(ignore_edge_direction=true)
      - filter_results(action=limit_number_of_results, max_results=100)

  ####################################################################################################
  #### Three node, two-hop questions
  two_hop_classic_question:
    name: Two hop question with one curie and two categories nodes
    description: Three nodes, one of which has a curie and the other two have a categories
    restated_question: Which n01(categories)s share the most n01(categories)s in common with n00(name)?
    template:
      - n00(ids)
      - e00()
      - n01(categories)
      - e01()
      - n02(categories)
    DSL:
      - expand()
      - overlay(action=compute_jaccard, start_node_key=n00, intermediate_node_key=n01, end_node_key=n02, virtual_relation_label=J1)
      - overlay(action=compute_ngd, virtual_relation_label=N1, subject_qnode_key=n00, object_qnode_key=n01)
      - overlay(action=compute_ngd, virtual_relation_label=N2, subject_qnode_key=n00, object_qnode_key=n02)
      - overlay(action=compute_ngd, virtual_relation_label=N3, subject_qnode_key=n01, object_qnode_key=n02)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  two_hop_curie-categories-curie_question:
    name: Two hop question where both end nodes are provided and a categories in the middle
    description: Three nodes, the two ends of which have a curie
    restated_question: Which n01(categories)s connect n00(name) and n02(name)?
    template:
      - n00(ids)
      - e00()
      - n01(categories)
      - e01()
      - n02(ids)
    DSL:
      - expand()
      - overlay(action=compute_ngd, virtual_relation_label=N1, subject_qnode_key=n00, object_qnode_key=n01)
      - overlay(action=compute_ngd, virtual_relation_label=N2, subject_qnode_key=n00, object_qnode_key=n02)
      - overlay(action=compute_ngd, virtual_relation_label=N3, subject_qnode_key=n01, object_qnode_key=n02)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  two_hop_two_curie_question:
    name: Two hop question where both end nodes are provided and no categories in the middle
    description: Three nodes, the two ends of which have a curie and no categories in the middle
    restated_question: which n01(categories)s connect n00(name) and n02(name)?
    template:
      - n00(ids)
      - e00()
      - n01()
      - e01()
      - n02(ids)
    DSL:
      - expand()
      - overlay(action=compute_ngd, virtual_relation_label=N1, subject_qnode_key=n00, object_qnode_key=n01)
      - overlay(action=compute_ngd, virtual_relation_label=N2, subject_qnode_key=n00, object_qnode_key=n02)
      - overlay(action=compute_ngd, virtual_relation_label=N3, subject_qnode_key=n01, object_qnode_key=n02)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  ####################################################################################################
  #### Four node, three-hop questions
  three_hop_classic_question:
    name: Three hop question with one curie and three more nodes
    description: Four nodes, one of which has a curie and the others can be anything
    restated_question: Which?
    template:
      - n00(ids)
      - e00()
      - n01()
      - e01()
      - n02()
      - e02()
      - n03()
    DSL:
      - expand()
      - overlay(action=fisher_exact_test,subject_qnode_key=n01,virtual_relation_label=F1,object_qnode_key=n02,filter_type=top_n,value=30)
      - overlay(action=fisher_exact_test,subject_qnode_key=n02,virtual_relation_label=F2,object_qnode_key=n03,filter_type=top_n,value=30)
      - overlay(action=compute_ngd, virtual_relation_label=N1, subject_qnode_key=n00, object_qnode_key=n01)
      - overlay(action=compute_ngd, virtual_relation_label=N2, subject_qnode_key=n01, object_qnode_key=n02)
      - overlay(action=compute_ngd, virtual_relation_label=N3, subject_qnode_key=n02, object_qnode_key=n03)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  #### Four node, three-hop questions, with end curies pinned
  three_hop_two_pinned_question:
    name: Three hop question with one curie and three more nodes
    description: Four nodes, one of which has a curie and the others can be anything
    restated_question: Which?
    template:
      - n00(ids)
      - e00()
      - n01()
      - e01()
      - n02()
      - e02()
      - n03(ids)
    DSL:
      - expand()
      - overlay(action=fisher_exact_test,subject_qnode_key=n01,virtual_relation_label=F1,object_qnode_key=n02,filter_type=top_n,value=30)
      - overlay(action=compute_ngd, virtual_relation_label=N1, subject_qnode_key=n00, object_qnode_key=n01)
      - overlay(action=compute_ngd, virtual_relation_label=N2, subject_qnode_key=n01, object_qnode_key=n02)
      - overlay(action=compute_ngd, virtual_relation_label=N3, subject_qnode_key=n02, object_qnode_key=n03)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)

  #### four node, forked question
  # FIXME: Query graph interpreter does not like non-linear queries
  four_node_forked_two_pinned_question:
    name: Four node forked, two pinned node question
    description: Four nodes, one unpinned ancestor with two pinned descendants
    restated_question: Which?
    template:
      - n01(ids)
      - e00()
      - n00()
      - e01()
      - n02(ids)
      - n00()
      - e03()
      - n03()
    DSL:
      - expand()
      - overlay(action=compute_jaccard,start_node_key=n01,intermediate_node_key=n00,end_node_key=n03,virtual_relation_label=J1)
      - overlay(action=compute_jaccard,start_node_key=n02,intermediate_node_key=n00,end_node_key=n03,virtual_relation_label=J2)
      - overlay(action=compute_ngd,default_value=inf,virtual_relation_label=N1,subject_qnode_key=n03,object_qnode_key=n02)
      - overlay(action=compute_ngd,default_value=inf,virtual_relation_label=N2,subject_qnode_key=n03,object_qnode_key=n01)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100, prune_kg=true)
  ####################################################################################################
  #### Five node, four-hop questions
  four_hop_classic_question:
    name: Four hop question with one curie and four more nodes
    description: Five nodes, one of which has a curie and the others can be anything. FET to decrease combinatorial explosion
    restated_question: Which?
    template:
      - n00(ids)
      - e00()
      - n01()
      - e01()
      - n02()
      - e02()
      - n03()
      - e03()
      - n04()
    DSL:
      - expand()
      - overlay(action=fisher_exact_test,subject_qnode_key=n01,virtual_relation_label=F1,object_qnode_key=n02,filter_type=top_n,value=20)
      - overlay(action=fisher_exact_test,subject_qnode_key=n02,virtual_relation_label=F2,object_qnode_key=n03,filter_type=top_n,value=20)
      - overlay(action=fisher_exact_test,subject_qnode_key=n03,virtual_relation_label=F3,object_qnode_key=n04,filter_type=top_n,value=20)
      - overlay(action=compute_ngd, virtual_relation_label=N1, subject_qnode_key=n00, object_qnode_key=n01)
      - overlay(action=compute_ngd, virtual_relation_label=N2, subject_qnode_key=n01, object_qnode_key=n02)
      - overlay(action=compute_ngd, virtual_relation_label=N3, subject_qnode_key=n02, object_qnode_key=n03)
      - overlay(action=compute_ngd, virtual_relation_label=N4, subject_qnode_key=n03, object_qnode_key=n04)
      - resultify()
      - filter_results(action=limit_number_of_results, max_results=100)



