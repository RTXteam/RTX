
TO DO:
- Sweep through unique concepts and set best category, etc.
- Remove the remapped_curie ??
- HEXA is still a problem
- There are lots of OMIM entries as phenotypic features



Summary of build process:

cd $RTX/code/ARAX/NodeSynonymizer
python sri_node_normalizer.py --build
python node_synonymizer.py --build

Testing:

python node_synonymizer.py --build --filter_file yy_losartan.json
python node_synonymizer.py --query

python node_synonymizer.py --lookup losartan
python node_synonymizer.py --lookup erythropoietin
python node_synonymizer.py --lookup NCIT:C29165

---

python node_synonymizer.py --build --filter_file yy_adenosine.json
python node_synonymizer.py --query

python node_synonymizer.py --lookup adenosine
python node_synonymizer.py --lookup CHEBI:16027
python node_synonymizer.py --lookup CHEBI:15422
python node_synonymizer.py --lookup CHEBI:16761
python node_synonymizer.py --lookup CHEBI:50732

---

python node_synonymizer.py --build --filter_file yy_PACA.json
python node_synonymizer.py --query

python node_synonymizer.py --lookup UniProtKB:P18509

---

python node_synonymizer.py --build --filter_file yy_TGFB1.json
python node_synonymizer.py --query

python node_synonymizer.py --lookup UniProtKB:P11117
python node_synonymizer.py --lookup NCBIGene:7040

---

python node_synonymizer.py --build --filter_file yy_GR.json
python node_synonymizer.py --query

python node_synonymizer.py --lookup PR:P00390
python node_synonymizer.py --lookup NCBIGENE:2908
python node_synonymizer.py --lookup NCBIGENE:2936
python node_synonymizer.py --lookup NCIT:C17071

---

python node_synonymizer.py --build --filter_file yy_AChE.json
python node_synonymizer.py --query

python node_synonymizer.py --lookup NCBIGENE:43
python node_synonymizer.py --lookup MONDO:0021668
python node_synonymizer.py --lookup CHEBI:39061


========

cp node_synonymizer.sqlite node_synonymizer.sqlite-save1

More issues:
#1239
python node_synonymizer.py --lookup FMR1 --export yy_FMR1.json
mv node_synonymizer.sqlite-save1 node_synonymizer.sqlite
python node_synonymizer.py --build --filter_file yy_FMR1.json
python node_synonymizer.py --lookup FMR1
huh. not quite clear. It's better than the issue for sure, but maybe still a problem?

#1250
python node_synonymizer.py --lookup SPMSY --export yy_SPMSY.json
Seems okay now?

#1226
python node_synonymizer.py --lookup UniProtKB:P01112
Seems okay now?

#1211
python node_synonymizer.py --lookup tositumomab
This is still a problem, but why??
python node_synonymizer.py --lookup UniProtKB:P01857

#1159
python node_synonymizer.py --lookup UniProtKB:P01137
Seems okay now?




========================================================================

Access method notes:

OBSOLETE

get_curies_and_types			- need to update
get_curies_and_types_and_names		- Calls previous and then tries to get the description as well from neo4j
get_names				- old
get_curies				- old
is_curie_present			- old
get_KG1_curies				- delete
convert_curie				- old. but probably useful
get_equivalent_nodes			- FIXED. GOOD				(renamed from get_equivalent_curies)
get_equivalent_entities			- ? obsolete
get_normalizer_results			- needs to be updated for batching
get_total_entity_count			- FIXED. GOOD.

========================================================================

Notes developing the new KGNodeIndex

2021-03-06

New data structures (Database tables do not have kg_ prefix):

#### One entry per actual node in KG2pre
kg_nodes{uc_curie}:		- Every node has a unique curie and an entry here. Upper case index dict key
0- uc_curie (tbl only)		- Every node has a unique curie and an entry here. Upper case
1- curie			- Every node has a unique curie and an entry here. Original case
2- original_name		- Original/current name of the node in the database
3- adjusted_name		- Final/potentially prettified name of the node
4- full_name                    - Full name of the node if there is one
5- category			- Category of the node in the database
6- uc_unique_concept_curie	- Curie of the unique concept coalescing this node

#### One entry per unique concept, what becomes a KG2c entry
kg_unique_concepts{uc_curie}:	- Curie identifying the unique concept coalescing many equivalent curies or nodes. Upper case index dict key
0- uc_curie (tbl only)		- Curie identifying the unique concept coalescing many equivalent curies or nodes. Upper case
1- curie			- Curie identifying the unique concept coalescing many equivalent curies or nodes. Original case
2- name				- Final best name of the concept
3- category			- Final best category of the concept
4- normalizer_curie		- Best curie from this entry in the normalizer
5- normalizer_name		- Best name from this entry in the normalizer
6- normalizer_category		- Best category from this entry in the normalizer
 * all_uc_curies{}		- A map of all curies for this concept
 * all_lc_names{}		- A map of all names for this concept (probably expendable. Useful for debugging)

#### One entry per known CURIE, either from KG2pre or from the SRI Node Normalizer
kg_curies{uc_curie}:		- Complete catalog of all curies, both in the KGs and in SRI normalizer, or even elsewhere. Upper case index dict key
0- uc_curie (tbl only)		- Complete catalog of all curies, both in the KGs and in SRI normalizer, or even elsewhere. Upper case
1- curie			- Complete catalog of all curies, both in the KGs and in SRI normalizer, or even elsewhere. Original case
2- uc_unique_concept_curie	- Curie of the unique concept associated with this curie (may not be "final" best curie)
3- name				- KG2 name for this curie
4- full_name			- KG2 full_name for this curie
5- category			- KG2 category of this curie
6- normalizer_name		- Name according to the SRI Normalizer
7- normalizer_category		- Category according to the SRI Normalizer
8- source			- Source of this curie

#### One entry per unique lower-cased name, either from a KG2pre node or the SRI Node Normalizer, but not the wild kg2_synonyms.json
kg_names{lc_name}		- All names lower cased, not curies. Lower case index dict key
0- lc_name (tbl only)		- All names lower cased, not curies. Lower case
1- name				- Original non-lower-case name
2- uc_unique_concept_curie	- Curie of the unique concept coalescing this node
3- source			- Source of this name: KG2, SRI
4- has_ambiguitiy		- True or False. If true, then look in kg_ambiguous_names for alternatives
 * uc_unique_concept_curies	- Dict of curies with this name if not coalesced

#### One entry per unique name in kg2_synonyms.json, some of which can be a bit crazy
kg_name_curies{lc_name_uc_curie} - All names lower cased plus upper cased curie dict key
0- lc_name (tbl only)		- All names lower cased, not curies. Lower case
1- name				- Original non-lower-case name
2- uc_curie			- Upper-case curie for this name -> curie association
3- uc_unique_concept_curie	- Curie of the unique concept coalescing this node
4- source			- Source of this name: KG2, SRI


=====================================================

Good tests:

# This one shows how to differentiate between a disease and a phenotypic feature of the same name
python KGNodeIndex.py --lookup=rickets --kg=KG1
python KGNodeIndex.py --lookup=DOID:384 --kg=KG1
python KGNodeIndex.py --lookup=COR1a --kg=KG1
python KGNodeIndex.py --lookup=insulin --kg=KG1
python KGNodeIndex.py --lookup=OMIM:261600 --kg=KG1
python KGNodeIndex.py --lookup=acetaminophen --kg=KG1
python KGNodeIndex.py --lookup=cementum --kg=KG1

python KGNodeIndex.py --kg_name KG2 --lookup DOID:14330


=====================================================

2020-06-12

Existing tables:

kg1_node:
- curie (UK)
- name
- type
- unique_concept_curie

kg1_unique_concept
- node_curie (UK)
- name
- type
- normalizer_curie
- normalizer_name

kg1_synonym
- lc_synonym (not UK)
- synonym
- synonym_is_curie ( 0 or 1 )
- node_curie
- type

================

Quick test:

mv KGNodeIndex.sqlite KGNodeIndex.sqlite-save
mv KGNodeIndex.KG2_map_state.pickle KGNodeIndex.KG2_map_state.pickle-save

egrep "CUI:C1413622|HGNC:2252|NCBIGene:11151|ENSEMBL:ENSG00000102879|UniProtKB:P31146|CUI:C3809383|OMIM:605000|Orphanet:179462" NodeNamesDescriptions_KG2.tsv

python KGNodeIndex --build --kg_name KG2

python KGNodeIndex.py --kg_name KG2 --lookup UniProtKB:P31146



==========================================================================

Problem associations debugging:

python node_synonymizer.py --lookup UniProtKB:P04150

python node_synonymizer.py --lookup UniProtKB:P04150 --export zz_GR.json

mv node_synonymizer.sqlite node_synonymizer.sqlite-save1

python node_synonymizer.py --build --kg_name both

----

rm node_synonymizer.sqlite
mv node_synonymizer.sqlite-save1 node_synonymizer.sqlite

python node_synonymizer.py --lookup UniProtKB:P22303 --export zz_TGFB1.json

mv node_synonymizer.sqlite node_synonymizer.sqlite-save1

python node_synonymizer.py --build --kg_name both














