pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'aws && build && translator && rtx' }
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
    }
    environment {
        IMAGE_NAME = "853771734544.dkr.ecr.us-east-1.amazonaws.com/translator-rtx-kg2"
        DOCKER_REPO_NAME = "translator-rtx-kg2"
        KUBERNETES_BLUE_CLUSTER_NAME = "translator-eks-test-blue-cluster"
        KUBERNETES_GREEN_CLUSTER_NAME = "translator-eks-test-green-cluster"
        NAMESPACE = "rtx"
        SECRET_NAME = "sftp-ssh-key"
        CFGFILE2DL = "team-expander-ops@sftp.transltr.io:/transltr-063208468694-sftp/team-expander/config_secrets.json"
        CFGFILE2DL_LOCALPATH = "deploy/kg2/configs/config_secrets.json"
        sftp_key = "deploy/kg2/secrets/team-expander-ops-sshkey-secret"
    }
    stages {
      stage('Build Version'){
          when { expression { return !params.BUILD_VERSION } }
          steps{
              script {
                  BUILD_VERSION_GENERATED = VersionNumber(
                      versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}-test',
                      projectStartDate:    '1970-01-01',
                      skipFailedBuilds:    true)
                  currentBuild.displayName = BUILD_VERSION_GENERATED
                  env.BUILD_VERSION = BUILD_VERSION_GENERATED
                  env.BUILD = 'true'
              }
          }
      }
      stage('Checkout source code') {
          steps {
              cleanWs()
              checkout scm
          }
      }
      stage('Build and Push Docker Image') {
          when { expression { return env.BUILD == 'true' }}
          environment {
            ENV_BUILD_BRANCH= sh (returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
          }
          steps {
              script {
                  docker.build(env.IMAGE_NAME, "--build-arg BUILD_BRANCH=$ENV_BUILD_BRANCH --no-cache -f ./DockerBuild/KG2-Dockerfile ./DockerBuild/")
                  sh '''
                  aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin  853771734544.dkr.ecr.us-east-1.amazonaws.com
                  '''
                  docker.image(env.IMAGE_NAME).push("${BUILD_VERSION}")
              }
          }
      }
      stage('Deploy to AWS EKS Blue') {
            agent {
                label 'translator && test && deploy'
            }
          steps {
              cleanWs()
              checkout scm
              configFileProvider([
                  configFile(fileId: 'kg2.values.ncats.yaml', targetLocation: 'deploy/kg2/kg2.values.ncats.yaml'),
                  configFile(fileId: 'preparekg2.sh', targetLocation: 'preparekg2.sh')
              ]){
                  script {
                      sh '''
                      aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_BLUE_CLUSTER_NAME}
                      /bin/bash preparekg2.sh
                      sftp -i SECRET_FILE -o StrictHostKeyChecking=no -p $CFGFILE2DL $CFGFILE2DL_LOCALPATH
                      cp code/config_dbs.json deploy/kg2/configs
                      cd deploy/kg2 && /bin/bash deploy.sh
                      '''
                   } 
                }
           }
       }
      stage('Clean Up') {
          steps {
              cleanWs()
          }
      }
    }
}
