pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'transltr-ci-build-node-03' }
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    environment {
        DOCKER_REPO_NAME = "translator-rtx-arax"
        KUBERNETES_BLUE_CLUSTER_NAME = "translator-eks-ci-blue-cluster"
        KUBERNETES_GREEN_CLUSTER_NAME = "translator-eks-ci-green-cluster"
        TEAM_EXPANDER_OPS_SSHKEY = credentials("team_expander_ops_sshkey")
    }
    stages {
      stage('Create K8S Secret From Jenkins Secrets') {
        steps {
          sh'''
            echo ${TEAM_EXPANDER_OPS_SSHKEY }
          '''
        }
      }
      /*
        stage('Build Version'){
            when { expression { return !params.BUILD_VERSION } }
            steps{
                script {
                    BUILD_VERSION_GENERATED = VersionNumber(
                        versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
                        projectStartDate:    '1970-01-01',
                        skipFailedBuilds:    true)
                    currentBuild.displayName = BUILD_VERSION_GENERATED
                    env.BUILD_VERSION = BUILD_VERSION_GENERATED
                    env.BUILD = 'true'
                }
            }
        }
        stage('Checkout source code') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Build Docker Image') {
           when { expression { return env.BUILD == 'true' }}
            steps {
              configFileProvider([
                  configFile(fileId: 'configv2.json', targetLocation: 'DockerBuild/configv2.json')
              ]){
                  script {
                      docker.build(env.DOCKER_REPO_NAME, "--build-arg SOURCE_FOLDER=./${BUILD_VERSION} --no-cache ./DockerBuild/")
                      docker.withRegistry('https://853771734544.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-ifx-deploy') {
                          docker.image(env.DOCKER_REPO_NAME).push("${BUILD_VERSION}")
                      }
                  }
              }
            }
        }
        stage('Deploy to AWS EKS Blue') {
            steps {
                configFileProvider([
                    configFile(fileId: 'arax-ci-env', targetLocation: 'deploy/.env')
                ]){
                    withAWS(credentials:'aws-ifx-deploy') {
                        sh '''
                        aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_BLUE_CLUSTER_NAME}
                        cd deploy && /bin/bash deploy.sh
                        # aws --region ${AWS_REGION} sts get-caller-identity
                        '''
                    }
                }
            }
        }
        */
    }
}
